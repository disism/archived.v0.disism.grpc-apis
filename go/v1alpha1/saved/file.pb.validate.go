// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/saved/v1alpha1/file.proto

package saved

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateFile with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateFile) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFile with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateFileMultiError, or
// nil if none found.
func (m *CreateFile) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFile) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cid

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Caption

	if len(errors) > 0 {
		return CreateFileMultiError(errors)
	}

	return nil
}

// CreateFileMultiError is an error wrapping multiple validation errors
// returned by CreateFile.ValidateAll() if the designated constraints aren't met.
type CreateFileMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFileMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFileMultiError) AllErrors() []error { return m }

// CreateFileValidationError is the validation error returned by
// CreateFile.Validate if the designated constraints aren't met.
type CreateFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFileValidationError) ErrorName() string { return "CreateFileValidationError" }

// Error satisfies the builtin error interface
func (e CreateFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFileValidationError{}

// Validate checks the field values on CreateFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFilesRequestMultiError, or nil if none found.
func (m *CreateFilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateFilesRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateFilesRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateFilesRequestValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateFilesRequestMultiError(errors)
	}

	return nil
}

// CreateFilesRequestMultiError is an error wrapping multiple validation errors
// returned by CreateFilesRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateFilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFilesRequestMultiError) AllErrors() []error { return m }

// CreateFilesRequestValidationError is the validation error returned by
// CreateFilesRequest.Validate if the designated constraints aren't met.
type CreateFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFilesRequestValidationError) ErrorName() string {
	return "CreateFilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFilesRequestValidationError{}

// Validate checks the field values on CreateFilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFilesResponseMultiError, or nil if none found.
func (m *CreateFilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateFilesResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateFilesResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateFilesResponseValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateFilesResponseValidationError{
						field:  fmt.Sprintf("Exists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateFilesResponseValidationError{
						field:  fmt.Sprintf("Exists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateFilesResponseValidationError{
					field:  fmt.Sprintf("Exists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateFilesResponseMultiError(errors)
	}

	return nil
}

// CreateFilesResponseMultiError is an error wrapping multiple validation
// errors returned by CreateFilesResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateFilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFilesResponseMultiError) AllErrors() []error { return m }

// CreateFilesResponseValidationError is the validation error returned by
// CreateFilesResponse.Validate if the designated constraints aren't met.
type CreateFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFilesResponseValidationError) ErrorName() string {
	return "CreateFilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFilesResponseValidationError{}

// Validate checks the field values on GetFilesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFilesRequestMultiError, or nil if none found.
func (m *GetFilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PerPage

	// no validation rules for Page

	// no validation rules for Sort

	// no validation rules for Direction

	if len(errors) > 0 {
		return GetFilesRequestMultiError(errors)
	}

	return nil
}

// GetFilesRequestMultiError is an error wrapping multiple validation errors
// returned by GetFilesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFilesRequestMultiError) AllErrors() []error { return m }

// GetFilesRequestValidationError is the validation error returned by
// GetFilesRequest.Validate if the designated constraints aren't met.
type GetFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFilesRequestValidationError) ErrorName() string { return "GetFilesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFilesRequestValidationError{}

// Validate checks the field values on GetFilesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFilesResponseMultiError, or nil if none found.
func (m *GetFilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFilesResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFilesResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFilesResponseValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for PerPage

	// no validation rules for Page

	// no validation rules for Message

	if len(errors) > 0 {
		return GetFilesResponseMultiError(errors)
	}

	return nil
}

// GetFilesResponseMultiError is an error wrapping multiple validation errors
// returned by GetFilesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFilesResponseMultiError) AllErrors() []error { return m }

// GetFilesResponseValidationError is the validation error returned by
// GetFilesResponse.Validate if the designated constraints aren't met.
type GetFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFilesResponseValidationError) ErrorName() string { return "GetFilesResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFilesResponseValidationError{}

// Validate checks the field values on GetFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRequestMultiError,
// or nil if none found.
func (m *GetFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetFileRequestMultiError(errors)
	}

	return nil
}

// GetFileRequestMultiError is an error wrapping multiple validation errors
// returned by GetFileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRequestMultiError) AllErrors() []error { return m }

// GetFileRequestValidationError is the validation error returned by
// GetFileRequest.Validate if the designated constraints aren't met.
type GetFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRequestValidationError) ErrorName() string { return "GetFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRequestValidationError{}

// Validate checks the field values on GetFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileResponseMultiError, or nil if none found.
func (m *GetFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileResponseValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return GetFileResponseMultiError(errors)
	}

	return nil
}

// GetFileResponseMultiError is an error wrapping multiple validation errors
// returned by GetFileResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileResponseMultiError) AllErrors() []error { return m }

// GetFileResponseValidationError is the validation error returned by
// GetFileResponse.Validate if the designated constraints aren't met.
type GetFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileResponseValidationError) ErrorName() string { return "GetFileResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileResponseValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileResponseMultiError, or nil if none found.
func (m *DeleteFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteFileResponseMultiError(errors)
	}

	return nil
}

// DeleteFileResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteFileResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileResponseMultiError) AllErrors() []error { return m }

// DeleteFileResponseValidationError is the validation error returned by
// DeleteFileResponse.Validate if the designated constraints aren't met.
type DeleteFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileResponseValidationError) ErrorName() string {
	return "DeleteFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileResponseValidationError{}
