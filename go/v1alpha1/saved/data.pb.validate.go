// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/saved/v1alpha1/data.proto

package saved

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DirData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DirData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DirData with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DirDataMultiError, or nil if none found.
func (m *DirData) ValidateAll() error {
	return m.validate(true)
}

func (m *DirData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DirDataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DirDataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DirDataValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DirDataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DirDataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DirDataValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	if len(errors) > 0 {
		return DirDataMultiError(errors)
	}

	return nil
}

// DirDataMultiError is an error wrapping multiple validation errors returned
// by DirData.ValidateAll() if the designated constraints aren't met.
type DirDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DirDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DirDataMultiError) AllErrors() []error { return m }

// DirDataValidationError is the validation error returned by DirData.Validate
// if the designated constraints aren't met.
type DirDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DirDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DirDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DirDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DirDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DirDataValidationError) ErrorName() string { return "DirDataValidationError" }

// Error satisfies the builtin error interface
func (e DirDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDirData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DirDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DirDataValidationError{}

// Validate checks the field values on FileData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileDataMultiError, or nil
// if none found.
func (m *FileData) ValidateAll() error {
	return m.validate(true)
}

func (m *FileData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileDataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileDataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileDataValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileDataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileDataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileDataValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Cid

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Caption

	if len(errors) > 0 {
		return FileDataMultiError(errors)
	}

	return nil
}

// FileDataMultiError is an error wrapping multiple validation errors returned
// by FileData.ValidateAll() if the designated constraints aren't met.
type FileDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileDataMultiError) AllErrors() []error { return m }

// FileDataValidationError is the validation error returned by
// FileData.Validate if the designated constraints aren't met.
type FileDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileDataValidationError) ErrorName() string { return "FileDataValidationError" }

// Error satisfies the builtin error interface
func (e FileDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileDataValidationError{}

// Validate checks the field values on FileWithDirs with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileWithDirs) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileWithDirs with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileWithDirsMultiError, or
// nil if none found.
func (m *FileWithDirs) ValidateAll() error {
	return m.validate(true)
}

func (m *FileWithDirs) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDirs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FileWithDirsValidationError{
						field:  fmt.Sprintf("Dirs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FileWithDirsValidationError{
						field:  fmt.Sprintf("Dirs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FileWithDirsValidationError{
					field:  fmt.Sprintf("Dirs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FileWithDirsValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FileWithDirsValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FileWithDirsValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FileWithDirsMultiError(errors)
	}

	return nil
}

// FileWithDirsMultiError is an error wrapping multiple validation errors
// returned by FileWithDirs.ValidateAll() if the designated constraints aren't met.
type FileWithDirsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileWithDirsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileWithDirsMultiError) AllErrors() []error { return m }

// FileWithDirsValidationError is the validation error returned by
// FileWithDirs.Validate if the designated constraints aren't met.
type FileWithDirsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileWithDirsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileWithDirsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileWithDirsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileWithDirsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileWithDirsValidationError) ErrorName() string { return "FileWithDirsValidationError" }

// Error satisfies the builtin error interface
func (e FileWithDirsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileWithDirs.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileWithDirsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileWithDirsValidationError{}
