// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/saved/v1alpha1/dir.proto

package saved

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSubdirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubdirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubdirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubdirRequestMultiError, or nil if none found.
func (m *CreateSubdirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubdirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DirId

	// no validation rules for Name

	if len(errors) > 0 {
		return CreateSubdirRequestMultiError(errors)
	}

	return nil
}

// CreateSubdirRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSubdirRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSubdirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubdirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubdirRequestMultiError) AllErrors() []error { return m }

// CreateSubdirRequestValidationError is the validation error returned by
// CreateSubdirRequest.Validate if the designated constraints aren't met.
type CreateSubdirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubdirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubdirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubdirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubdirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubdirRequestValidationError) ErrorName() string {
	return "CreateSubdirRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubdirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubdirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubdirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubdirRequestValidationError{}

// Validate checks the field values on CreateSubdirResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSubdirResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSubdirResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSubdirResponseMultiError, or nil if none found.
func (m *CreateSubdirResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSubdirResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDir()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSubdirResponseValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSubdirResponseValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDir()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSubdirResponseValidationError{
				field:  "Dir",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSubdirResponseMultiError(errors)
	}

	return nil
}

// CreateSubdirResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSubdirResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSubdirResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSubdirResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSubdirResponseMultiError) AllErrors() []error { return m }

// CreateSubdirResponseValidationError is the validation error returned by
// CreateSubdirResponse.Validate if the designated constraints aren't met.
type CreateSubdirResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSubdirResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSubdirResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSubdirResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSubdirResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSubdirResponseValidationError) ErrorName() string {
	return "CreateSubdirResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSubdirResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSubdirResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSubdirResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSubdirResponseValidationError{}

// Validate checks the field values on ListDirRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDirRequestMultiError,
// or nil if none found.
func (m *ListDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ListDirRequestMultiError(errors)
	}

	return nil
}

// ListDirRequestMultiError is an error wrapping multiple validation errors
// returned by ListDirRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDirRequestMultiError) AllErrors() []error { return m }

// ListDirRequestValidationError is the validation error returned by
// ListDirRequest.Validate if the designated constraints aren't met.
type ListDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirRequestValidationError) ErrorName() string { return "ListDirRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirRequestValidationError{}

// Validate checks the field values on ListDirResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListDirResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDirResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDirResponseMultiError, or nil if none found.
func (m *ListDirResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDirResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDir()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDirResponseValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDirResponseValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDir()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDirResponseValidationError{
				field:  "Dir",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSubdirs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDirResponseValidationError{
						field:  fmt.Sprintf("Subdirs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDirResponseValidationError{
						field:  fmt.Sprintf("Subdirs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDirResponseValidationError{
					field:  fmt.Sprintf("Subdirs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetParents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDirResponseValidationError{
						field:  fmt.Sprintf("Parents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDirResponseValidationError{
						field:  fmt.Sprintf("Parents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDirResponseValidationError{
					field:  fmt.Sprintf("Parents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDirResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDirResponseValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDirResponseValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDirResponseMultiError(errors)
	}

	return nil
}

// ListDirResponseMultiError is an error wrapping multiple validation errors
// returned by ListDirResponse.ValidateAll() if the designated constraints
// aren't met.
type ListDirResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDirResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDirResponseMultiError) AllErrors() []error { return m }

// ListDirResponseValidationError is the validation error returned by
// ListDirResponse.Validate if the designated constraints aren't met.
type ListDirResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirResponseValidationError) ErrorName() string { return "ListDirResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListDirResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirResponseValidationError{}

// Validate checks the field values on MoveDirRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MoveDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveDirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MoveDirRequestMultiError,
// or nil if none found.
func (m *MoveDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DirId

	// no validation rules for DestId

	if len(errors) > 0 {
		return MoveDirRequestMultiError(errors)
	}

	return nil
}

// MoveDirRequestMultiError is an error wrapping multiple validation errors
// returned by MoveDirRequest.ValidateAll() if the designated constraints
// aren't met.
type MoveDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveDirRequestMultiError) AllErrors() []error { return m }

// MoveDirRequestValidationError is the validation error returned by
// MoveDirRequest.Validate if the designated constraints aren't met.
type MoveDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveDirRequestValidationError) ErrorName() string { return "MoveDirRequestValidationError" }

// Error satisfies the builtin error interface
func (e MoveDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveDirRequestValidationError{}

// Validate checks the field values on MoveDirResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MoveDirResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MoveDirResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MoveDirResponseMultiError, or nil if none found.
func (m *MoveDirResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MoveDirResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return MoveDirResponseMultiError(errors)
	}

	return nil
}

// MoveDirResponseMultiError is an error wrapping multiple validation errors
// returned by MoveDirResponse.ValidateAll() if the designated constraints
// aren't met.
type MoveDirResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MoveDirResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MoveDirResponseMultiError) AllErrors() []error { return m }

// MoveDirResponseValidationError is the validation error returned by
// MoveDirResponse.Validate if the designated constraints aren't met.
type MoveDirResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MoveDirResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MoveDirResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MoveDirResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MoveDirResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MoveDirResponseValidationError) ErrorName() string { return "MoveDirResponseValidationError" }

// Error satisfies the builtin error interface
func (e MoveDirResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMoveDirResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MoveDirResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MoveDirResponseValidationError{}

// Validate checks the field values on RemoveDirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveDirRequestMultiError, or nil if none found.
func (m *RemoveDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DirId

	if len(errors) > 0 {
		return RemoveDirRequestMultiError(errors)
	}

	return nil
}

// RemoveDirRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveDirRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDirRequestMultiError) AllErrors() []error { return m }

// RemoveDirRequestValidationError is the validation error returned by
// RemoveDirRequest.Validate if the designated constraints aren't met.
type RemoveDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDirRequestValidationError) ErrorName() string { return "RemoveDirRequestValidationError" }

// Error satisfies the builtin error interface
func (e RemoveDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDirRequestValidationError{}

// Validate checks the field values on RemoveDirResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RemoveDirResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDirResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveDirResponseMultiError, or nil if none found.
func (m *RemoveDirResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDirResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return RemoveDirResponseMultiError(errors)
	}

	return nil
}

// RemoveDirResponseMultiError is an error wrapping multiple validation errors
// returned by RemoveDirResponse.ValidateAll() if the designated constraints
// aren't met.
type RemoveDirResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDirResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDirResponseMultiError) AllErrors() []error { return m }

// RemoveDirResponseValidationError is the validation error returned by
// RemoveDirResponse.Validate if the designated constraints aren't met.
type RemoveDirResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDirResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDirResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDirResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDirResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDirResponseValidationError) ErrorName() string {
	return "RemoveDirResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDirResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDirResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDirResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDirResponseValidationError{}

// Validate checks the field values on RenameDirRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RenameDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameDirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameDirRequestMultiError, or nil if none found.
func (m *RenameDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DirId

	// no validation rules for Name

	if len(errors) > 0 {
		return RenameDirRequestMultiError(errors)
	}

	return nil
}

// RenameDirRequestMultiError is an error wrapping multiple validation errors
// returned by RenameDirRequest.ValidateAll() if the designated constraints
// aren't met.
type RenameDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameDirRequestMultiError) AllErrors() []error { return m }

// RenameDirRequestValidationError is the validation error returned by
// RenameDirRequest.Validate if the designated constraints aren't met.
type RenameDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameDirRequestValidationError) ErrorName() string { return "RenameDirRequestValidationError" }

// Error satisfies the builtin error interface
func (e RenameDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameDirRequestValidationError{}

// Validate checks the field values on RenameDirResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RenameDirResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameDirResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameDirResponseMultiError, or nil if none found.
func (m *RenameDirResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameDirResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDir()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RenameDirResponseValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RenameDirResponseValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDir()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RenameDirResponseValidationError{
				field:  "Dir",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RenameDirResponseMultiError(errors)
	}

	return nil
}

// RenameDirResponseMultiError is an error wrapping multiple validation errors
// returned by RenameDirResponse.ValidateAll() if the designated constraints
// aren't met.
type RenameDirResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameDirResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameDirResponseMultiError) AllErrors() []error { return m }

// RenameDirResponseValidationError is the validation error returned by
// RenameDirResponse.Validate if the designated constraints aren't met.
type RenameDirResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameDirResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameDirResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameDirResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameDirResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameDirResponseValidationError) ErrorName() string {
	return "RenameDirResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameDirResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameDirResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameDirResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameDirResponseValidationError{}

// Validate checks the field values on AddFileToDirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddFileToDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFileToDirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFileToDirRequestMultiError, or nil if none found.
func (m *AddFileToDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFileToDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DirId

	// no validation rules for FileId

	if len(errors) > 0 {
		return AddFileToDirRequestMultiError(errors)
	}

	return nil
}

// AddFileToDirRequestMultiError is an error wrapping multiple validation
// errors returned by AddFileToDirRequest.ValidateAll() if the designated
// constraints aren't met.
type AddFileToDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFileToDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFileToDirRequestMultiError) AllErrors() []error { return m }

// AddFileToDirRequestValidationError is the validation error returned by
// AddFileToDirRequest.Validate if the designated constraints aren't met.
type AddFileToDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFileToDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFileToDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFileToDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFileToDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFileToDirRequestValidationError) ErrorName() string {
	return "AddFileToDirRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddFileToDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFileToDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFileToDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFileToDirRequestValidationError{}

// Validate checks the field values on AddFileToDirResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddFileToDirResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFileToDirResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFileToDirResponseMultiError, or nil if none found.
func (m *AddFileToDirResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFileToDirResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetDir()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFileToDirResponseValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFileToDirResponseValidationError{
					field:  "Dir",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDir()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFileToDirResponseValidationError{
				field:  "Dir",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddFileToDirResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddFileToDirResponseValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddFileToDirResponseValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddFileToDirResponseMultiError(errors)
	}

	return nil
}

// AddFileToDirResponseMultiError is an error wrapping multiple validation
// errors returned by AddFileToDirResponse.ValidateAll() if the designated
// constraints aren't met.
type AddFileToDirResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFileToDirResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFileToDirResponseMultiError) AllErrors() []error { return m }

// AddFileToDirResponseValidationError is the validation error returned by
// AddFileToDirResponse.Validate if the designated constraints aren't met.
type AddFileToDirResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFileToDirResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFileToDirResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFileToDirResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFileToDirResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFileToDirResponseValidationError) ErrorName() string {
	return "AddFileToDirResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddFileToDirResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFileToDirResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFileToDirResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFileToDirResponseValidationError{}

// Validate checks the field values on RemoveFileFromDirRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveFileFromDirRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveFileFromDirRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveFileFromDirRequestMultiError, or nil if none found.
func (m *RemoveFileFromDirRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveFileFromDirRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DirId

	// no validation rules for FileId

	if len(errors) > 0 {
		return RemoveFileFromDirRequestMultiError(errors)
	}

	return nil
}

// RemoveFileFromDirRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveFileFromDirRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveFileFromDirRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveFileFromDirRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveFileFromDirRequestMultiError) AllErrors() []error { return m }

// RemoveFileFromDirRequestValidationError is the validation error returned by
// RemoveFileFromDirRequest.Validate if the designated constraints aren't met.
type RemoveFileFromDirRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFileFromDirRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFileFromDirRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFileFromDirRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFileFromDirRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFileFromDirRequestValidationError) ErrorName() string {
	return "RemoveFileFromDirRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFileFromDirRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFileFromDirRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFileFromDirRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFileFromDirRequestValidationError{}

// Validate checks the field values on RemoveFileFromDirResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveFileFromDirResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveFileFromDirResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveFileFromDirResponseMultiError, or nil if none found.
func (m *RemoveFileFromDirResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveFileFromDirResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return RemoveFileFromDirResponseMultiError(errors)
	}

	return nil
}

// RemoveFileFromDirResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveFileFromDirResponse.ValidateAll() if the
// designated constraints aren't met.
type RemoveFileFromDirResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveFileFromDirResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveFileFromDirResponseMultiError) AllErrors() []error { return m }

// RemoveFileFromDirResponseValidationError is the validation error returned by
// RemoveFileFromDirResponse.Validate if the designated constraints aren't met.
type RemoveFileFromDirResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFileFromDirResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFileFromDirResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFileFromDirResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFileFromDirResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFileFromDirResponseValidationError) ErrorName() string {
	return "RemoveFileFromDirResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFileFromDirResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFileFromDirResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFileFromDirResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFileFromDirResponseValidationError{}
