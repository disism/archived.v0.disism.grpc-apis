// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/saved/v1alpha1/dir.proto

package saved

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DirectoryService_CreateSubdir_FullMethodName      = "/proto.saved.v1alpha1.DirectoryService/CreateSubdir"
	DirectoryService_ListDir_FullMethodName           = "/proto.saved.v1alpha1.DirectoryService/ListDir"
	DirectoryService_MoveDir_FullMethodName           = "/proto.saved.v1alpha1.DirectoryService/MoveDir"
	DirectoryService_RemoveDir_FullMethodName         = "/proto.saved.v1alpha1.DirectoryService/RemoveDir"
	DirectoryService_RenameDir_FullMethodName         = "/proto.saved.v1alpha1.DirectoryService/RenameDir"
	DirectoryService_AddFileToDir_FullMethodName      = "/proto.saved.v1alpha1.DirectoryService/AddFileToDir"
	DirectoryService_RemoveFileFromDir_FullMethodName = "/proto.saved.v1alpha1.DirectoryService/RemoveFileFromDir"
)

// DirectoryServiceClient is the client API for DirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryServiceClient interface {
	CreateSubdir(ctx context.Context, in *CreateSubdirRequest, opts ...grpc.CallOption) (*CreateSubdirResponse, error)
	ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirResponse, error)
	MoveDir(ctx context.Context, in *MoveDirRequest, opts ...grpc.CallOption) (*MoveDirResponse, error)
	RemoveDir(ctx context.Context, in *RemoveDirRequest, opts ...grpc.CallOption) (*RemoveDirResponse, error)
	RenameDir(ctx context.Context, in *RenameDirRequest, opts ...grpc.CallOption) (*RenameDirResponse, error)
	AddFileToDir(ctx context.Context, in *AddFileToDirRequest, opts ...grpc.CallOption) (*AddFileToDirResponse, error)
	RemoveFileFromDir(ctx context.Context, in *RemoveFileFromDirRequest, opts ...grpc.CallOption) (*RemoveFileFromDirResponse, error)
}

type directoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryServiceClient(cc grpc.ClientConnInterface) DirectoryServiceClient {
	return &directoryServiceClient{cc}
}

func (c *directoryServiceClient) CreateSubdir(ctx context.Context, in *CreateSubdirRequest, opts ...grpc.CallOption) (*CreateSubdirResponse, error) {
	out := new(CreateSubdirResponse)
	err := c.cc.Invoke(ctx, DirectoryService_CreateSubdir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) ListDir(ctx context.Context, in *ListDirRequest, opts ...grpc.CallOption) (*ListDirResponse, error) {
	out := new(ListDirResponse)
	err := c.cc.Invoke(ctx, DirectoryService_ListDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) MoveDir(ctx context.Context, in *MoveDirRequest, opts ...grpc.CallOption) (*MoveDirResponse, error) {
	out := new(MoveDirResponse)
	err := c.cc.Invoke(ctx, DirectoryService_MoveDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) RemoveDir(ctx context.Context, in *RemoveDirRequest, opts ...grpc.CallOption) (*RemoveDirResponse, error) {
	out := new(RemoveDirResponse)
	err := c.cc.Invoke(ctx, DirectoryService_RemoveDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) RenameDir(ctx context.Context, in *RenameDirRequest, opts ...grpc.CallOption) (*RenameDirResponse, error) {
	out := new(RenameDirResponse)
	err := c.cc.Invoke(ctx, DirectoryService_RenameDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) AddFileToDir(ctx context.Context, in *AddFileToDirRequest, opts ...grpc.CallOption) (*AddFileToDirResponse, error) {
	out := new(AddFileToDirResponse)
	err := c.cc.Invoke(ctx, DirectoryService_AddFileToDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) RemoveFileFromDir(ctx context.Context, in *RemoveFileFromDirRequest, opts ...grpc.CallOption) (*RemoveFileFromDirResponse, error) {
	out := new(RemoveFileFromDirResponse)
	err := c.cc.Invoke(ctx, DirectoryService_RemoveFileFromDir_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServiceServer is the server API for DirectoryService service.
// All implementations should embed UnimplementedDirectoryServiceServer
// for forward compatibility
type DirectoryServiceServer interface {
	CreateSubdir(context.Context, *CreateSubdirRequest) (*CreateSubdirResponse, error)
	ListDir(context.Context, *ListDirRequest) (*ListDirResponse, error)
	MoveDir(context.Context, *MoveDirRequest) (*MoveDirResponse, error)
	RemoveDir(context.Context, *RemoveDirRequest) (*RemoveDirResponse, error)
	RenameDir(context.Context, *RenameDirRequest) (*RenameDirResponse, error)
	AddFileToDir(context.Context, *AddFileToDirRequest) (*AddFileToDirResponse, error)
	RemoveFileFromDir(context.Context, *RemoveFileFromDirRequest) (*RemoveFileFromDirResponse, error)
}

// UnimplementedDirectoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDirectoryServiceServer struct {
}

func (UnimplementedDirectoryServiceServer) CreateSubdir(context.Context, *CreateSubdirRequest) (*CreateSubdirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubdir not implemented")
}
func (UnimplementedDirectoryServiceServer) ListDir(context.Context, *ListDirRequest) (*ListDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDir not implemented")
}
func (UnimplementedDirectoryServiceServer) MoveDir(context.Context, *MoveDirRequest) (*MoveDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveDir not implemented")
}
func (UnimplementedDirectoryServiceServer) RemoveDir(context.Context, *RemoveDirRequest) (*RemoveDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDir not implemented")
}
func (UnimplementedDirectoryServiceServer) RenameDir(context.Context, *RenameDirRequest) (*RenameDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameDir not implemented")
}
func (UnimplementedDirectoryServiceServer) AddFileToDir(context.Context, *AddFileToDirRequest) (*AddFileToDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFileToDir not implemented")
}
func (UnimplementedDirectoryServiceServer) RemoveFileFromDir(context.Context, *RemoveFileFromDirRequest) (*RemoveFileFromDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFileFromDir not implemented")
}

// UnsafeDirectoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryServiceServer will
// result in compilation errors.
type UnsafeDirectoryServiceServer interface {
	mustEmbedUnimplementedDirectoryServiceServer()
}

func RegisterDirectoryServiceServer(s grpc.ServiceRegistrar, srv DirectoryServiceServer) {
	s.RegisterService(&DirectoryService_ServiceDesc, srv)
}

func _DirectoryService_CreateSubdir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubdirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).CreateSubdir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectoryService_CreateSubdir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).CreateSubdir(ctx, req.(*CreateSubdirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_ListDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).ListDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectoryService_ListDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).ListDir(ctx, req.(*ListDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_MoveDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).MoveDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectoryService_MoveDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).MoveDir(ctx, req.(*MoveDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_RemoveDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).RemoveDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectoryService_RemoveDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).RemoveDir(ctx, req.(*RemoveDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_RenameDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).RenameDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectoryService_RenameDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).RenameDir(ctx, req.(*RenameDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_AddFileToDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFileToDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).AddFileToDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectoryService_AddFileToDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).AddFileToDir(ctx, req.(*AddFileToDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_RemoveFileFromDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFileFromDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).RemoveFileFromDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DirectoryService_RemoveFileFromDir_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).RemoveFileFromDir(ctx, req.(*RemoveFileFromDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectoryService_ServiceDesc is the grpc.ServiceDesc for DirectoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.saved.v1alpha1.DirectoryService",
	HandlerType: (*DirectoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubdir",
			Handler:    _DirectoryService_CreateSubdir_Handler,
		},
		{
			MethodName: "ListDir",
			Handler:    _DirectoryService_ListDir_Handler,
		},
		{
			MethodName: "MoveDir",
			Handler:    _DirectoryService_MoveDir_Handler,
		},
		{
			MethodName: "RemoveDir",
			Handler:    _DirectoryService_RemoveDir_Handler,
		},
		{
			MethodName: "RenameDir",
			Handler:    _DirectoryService_RenameDir_Handler,
		},
		{
			MethodName: "AddFileToDir",
			Handler:    _DirectoryService_AddFileToDir_Handler,
		},
		{
			MethodName: "RemoveFileFromDir",
			Handler:    _DirectoryService_RemoveFileFromDir_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/saved/v1alpha1/dir.proto",
}
