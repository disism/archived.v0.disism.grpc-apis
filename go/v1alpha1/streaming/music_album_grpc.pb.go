// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/streaming/v1alpha1/music_album.proto

package streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MusicAlbumService_CreateAlbum_FullMethodName       = "/proto.streaming.v1alpha1.MusicAlbumService/CreateAlbum"
	MusicAlbumService_GetAlbum_FullMethodName          = "/proto.streaming.v1alpha1.MusicAlbumService/GetAlbum"
	MusicAlbumService_EditAlbum_FullMethodName         = "/proto.streaming.v1alpha1.MusicAlbumService/EditAlbum"
	MusicAlbumService_AddAlbumArtist_FullMethodName    = "/proto.streaming.v1alpha1.MusicAlbumService/AddAlbumArtist"
	MusicAlbumService_RemoveAlbumArtist_FullMethodName = "/proto.streaming.v1alpha1.MusicAlbumService/RemoveAlbumArtist"
	MusicAlbumService_GetAlbums_FullMethodName         = "/proto.streaming.v1alpha1.MusicAlbumService/GetAlbums"
)

// MusicAlbumServiceClient is the client API for MusicAlbumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicAlbumServiceClient interface {
	CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumResponse, error)
	GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error)
	EditAlbum(ctx context.Context, in *EditAlbumRequest, opts ...grpc.CallOption) (*EditAlbumResponse, error)
	AddAlbumArtist(ctx context.Context, in *AddAlbumArtistRequest, opts ...grpc.CallOption) (*AddAlbumArtistResponse, error)
	RemoveAlbumArtist(ctx context.Context, in *RemoveAlbumArtistRequest, opts ...grpc.CallOption) (*RemoveAlbumArtistResponse, error)
	GetAlbums(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAlbumsResponse, error)
}

type musicAlbumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicAlbumServiceClient(cc grpc.ClientConnInterface) MusicAlbumServiceClient {
	return &musicAlbumServiceClient{cc}
}

func (c *musicAlbumServiceClient) CreateAlbum(ctx context.Context, in *CreateAlbumRequest, opts ...grpc.CallOption) (*CreateAlbumResponse, error) {
	out := new(CreateAlbumResponse)
	err := c.cc.Invoke(ctx, MusicAlbumService_CreateAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicAlbumServiceClient) GetAlbum(ctx context.Context, in *GetAlbumRequest, opts ...grpc.CallOption) (*GetAlbumResponse, error) {
	out := new(GetAlbumResponse)
	err := c.cc.Invoke(ctx, MusicAlbumService_GetAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicAlbumServiceClient) EditAlbum(ctx context.Context, in *EditAlbumRequest, opts ...grpc.CallOption) (*EditAlbumResponse, error) {
	out := new(EditAlbumResponse)
	err := c.cc.Invoke(ctx, MusicAlbumService_EditAlbum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicAlbumServiceClient) AddAlbumArtist(ctx context.Context, in *AddAlbumArtistRequest, opts ...grpc.CallOption) (*AddAlbumArtistResponse, error) {
	out := new(AddAlbumArtistResponse)
	err := c.cc.Invoke(ctx, MusicAlbumService_AddAlbumArtist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicAlbumServiceClient) RemoveAlbumArtist(ctx context.Context, in *RemoveAlbumArtistRequest, opts ...grpc.CallOption) (*RemoveAlbumArtistResponse, error) {
	out := new(RemoveAlbumArtistResponse)
	err := c.cc.Invoke(ctx, MusicAlbumService_RemoveAlbumArtist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicAlbumServiceClient) GetAlbums(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAlbumsResponse, error) {
	out := new(GetAlbumsResponse)
	err := c.cc.Invoke(ctx, MusicAlbumService_GetAlbums_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicAlbumServiceServer is the server API for MusicAlbumService service.
// All implementations should embed UnimplementedMusicAlbumServiceServer
// for forward compatibility
type MusicAlbumServiceServer interface {
	CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumResponse, error)
	GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error)
	EditAlbum(context.Context, *EditAlbumRequest) (*EditAlbumResponse, error)
	AddAlbumArtist(context.Context, *AddAlbumArtistRequest) (*AddAlbumArtistResponse, error)
	RemoveAlbumArtist(context.Context, *RemoveAlbumArtistRequest) (*RemoveAlbumArtistResponse, error)
	GetAlbums(context.Context, *emptypb.Empty) (*GetAlbumsResponse, error)
}

// UnimplementedMusicAlbumServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMusicAlbumServiceServer struct {
}

func (UnimplementedMusicAlbumServiceServer) CreateAlbum(context.Context, *CreateAlbumRequest) (*CreateAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlbum not implemented")
}
func (UnimplementedMusicAlbumServiceServer) GetAlbum(context.Context, *GetAlbumRequest) (*GetAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbum not implemented")
}
func (UnimplementedMusicAlbumServiceServer) EditAlbum(context.Context, *EditAlbumRequest) (*EditAlbumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditAlbum not implemented")
}
func (UnimplementedMusicAlbumServiceServer) AddAlbumArtist(context.Context, *AddAlbumArtistRequest) (*AddAlbumArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAlbumArtist not implemented")
}
func (UnimplementedMusicAlbumServiceServer) RemoveAlbumArtist(context.Context, *RemoveAlbumArtistRequest) (*RemoveAlbumArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAlbumArtist not implemented")
}
func (UnimplementedMusicAlbumServiceServer) GetAlbums(context.Context, *emptypb.Empty) (*GetAlbumsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlbums not implemented")
}

// UnsafeMusicAlbumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicAlbumServiceServer will
// result in compilation errors.
type UnsafeMusicAlbumServiceServer interface {
	mustEmbedUnimplementedMusicAlbumServiceServer()
}

func RegisterMusicAlbumServiceServer(s grpc.ServiceRegistrar, srv MusicAlbumServiceServer) {
	s.RegisterService(&MusicAlbumService_ServiceDesc, srv)
}

func _MusicAlbumService_CreateAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicAlbumServiceServer).CreateAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicAlbumService_CreateAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicAlbumServiceServer).CreateAlbum(ctx, req.(*CreateAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicAlbumService_GetAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicAlbumServiceServer).GetAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicAlbumService_GetAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicAlbumServiceServer).GetAlbum(ctx, req.(*GetAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicAlbumService_EditAlbum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditAlbumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicAlbumServiceServer).EditAlbum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicAlbumService_EditAlbum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicAlbumServiceServer).EditAlbum(ctx, req.(*EditAlbumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicAlbumService_AddAlbumArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAlbumArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicAlbumServiceServer).AddAlbumArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicAlbumService_AddAlbumArtist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicAlbumServiceServer).AddAlbumArtist(ctx, req.(*AddAlbumArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicAlbumService_RemoveAlbumArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAlbumArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicAlbumServiceServer).RemoveAlbumArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicAlbumService_RemoveAlbumArtist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicAlbumServiceServer).RemoveAlbumArtist(ctx, req.(*RemoveAlbumArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicAlbumService_GetAlbums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicAlbumServiceServer).GetAlbums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicAlbumService_GetAlbums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicAlbumServiceServer).GetAlbums(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicAlbumService_ServiceDesc is the grpc.ServiceDesc for MusicAlbumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicAlbumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.streaming.v1alpha1.MusicAlbumService",
	HandlerType: (*MusicAlbumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlbum",
			Handler:    _MusicAlbumService_CreateAlbum_Handler,
		},
		{
			MethodName: "GetAlbum",
			Handler:    _MusicAlbumService_GetAlbum_Handler,
		},
		{
			MethodName: "EditAlbum",
			Handler:    _MusicAlbumService_EditAlbum_Handler,
		},
		{
			MethodName: "AddAlbumArtist",
			Handler:    _MusicAlbumService_AddAlbumArtist_Handler,
		},
		{
			MethodName: "RemoveAlbumArtist",
			Handler:    _MusicAlbumService_RemoveAlbumArtist_Handler,
		},
		{
			MethodName: "GetAlbums",
			Handler:    _MusicAlbumService_GetAlbums_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/streaming/v1alpha1/music_album.proto",
}
