// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/streaming/v1alpha1/music.proto

package streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MusicService_GetMusics_FullMethodName   = "/proto.streaming.v1alpha1.MusicService/GetMusics"
	MusicService_CreateMusic_FullMethodName = "/proto.streaming.v1alpha1.MusicService/CreateMusic"
	MusicService_EditMusic_FullMethodName   = "/proto.streaming.v1alpha1.MusicService/EditMusic"
	MusicService_AddMusic_FullMethodName    = "/proto.streaming.v1alpha1.MusicService/AddMusic"
	MusicService_RemoveMusic_FullMethodName = "/proto.streaming.v1alpha1.MusicService/RemoveMusic"
)

// MusicServiceClient is the client API for MusicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicServiceClient interface {
	GetMusics(ctx context.Context, in *GetMusicsRequest, opts ...grpc.CallOption) (*GetMusicsResponse, error)
	CreateMusic(ctx context.Context, in *CreateMusicRequest, opts ...grpc.CallOption) (*CreateMusicResponse, error)
	EditMusic(ctx context.Context, in *EditMusicRequest, opts ...grpc.CallOption) (*EditMusicResponse, error)
	AddMusic(ctx context.Context, in *AddMusicRequest, opts ...grpc.CallOption) (*AddMusicResponse, error)
	RemoveMusic(ctx context.Context, in *RemoveMusicRequest, opts ...grpc.CallOption) (*RemoveMusicResponse, error)
}

type musicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicServiceClient(cc grpc.ClientConnInterface) MusicServiceClient {
	return &musicServiceClient{cc}
}

func (c *musicServiceClient) GetMusics(ctx context.Context, in *GetMusicsRequest, opts ...grpc.CallOption) (*GetMusicsResponse, error) {
	out := new(GetMusicsResponse)
	err := c.cc.Invoke(ctx, MusicService_GetMusics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) CreateMusic(ctx context.Context, in *CreateMusicRequest, opts ...grpc.CallOption) (*CreateMusicResponse, error) {
	out := new(CreateMusicResponse)
	err := c.cc.Invoke(ctx, MusicService_CreateMusic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) EditMusic(ctx context.Context, in *EditMusicRequest, opts ...grpc.CallOption) (*EditMusicResponse, error) {
	out := new(EditMusicResponse)
	err := c.cc.Invoke(ctx, MusicService_EditMusic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) AddMusic(ctx context.Context, in *AddMusicRequest, opts ...grpc.CallOption) (*AddMusicResponse, error) {
	out := new(AddMusicResponse)
	err := c.cc.Invoke(ctx, MusicService_AddMusic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicServiceClient) RemoveMusic(ctx context.Context, in *RemoveMusicRequest, opts ...grpc.CallOption) (*RemoveMusicResponse, error) {
	out := new(RemoveMusicResponse)
	err := c.cc.Invoke(ctx, MusicService_RemoveMusic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicServiceServer is the server API for MusicService service.
// All implementations should embed UnimplementedMusicServiceServer
// for forward compatibility
type MusicServiceServer interface {
	GetMusics(context.Context, *GetMusicsRequest) (*GetMusicsResponse, error)
	CreateMusic(context.Context, *CreateMusicRequest) (*CreateMusicResponse, error)
	EditMusic(context.Context, *EditMusicRequest) (*EditMusicResponse, error)
	AddMusic(context.Context, *AddMusicRequest) (*AddMusicResponse, error)
	RemoveMusic(context.Context, *RemoveMusicRequest) (*RemoveMusicResponse, error)
}

// UnimplementedMusicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMusicServiceServer struct {
}

func (UnimplementedMusicServiceServer) GetMusics(context.Context, *GetMusicsRequest) (*GetMusicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMusics not implemented")
}
func (UnimplementedMusicServiceServer) CreateMusic(context.Context, *CreateMusicRequest) (*CreateMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMusic not implemented")
}
func (UnimplementedMusicServiceServer) EditMusic(context.Context, *EditMusicRequest) (*EditMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMusic not implemented")
}
func (UnimplementedMusicServiceServer) AddMusic(context.Context, *AddMusicRequest) (*AddMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMusic not implemented")
}
func (UnimplementedMusicServiceServer) RemoveMusic(context.Context, *RemoveMusicRequest) (*RemoveMusicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMusic not implemented")
}

// UnsafeMusicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicServiceServer will
// result in compilation errors.
type UnsafeMusicServiceServer interface {
	mustEmbedUnimplementedMusicServiceServer()
}

func RegisterMusicServiceServer(s grpc.ServiceRegistrar, srv MusicServiceServer) {
	s.RegisterService(&MusicService_ServiceDesc, srv)
}

func _MusicService_GetMusics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMusicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).GetMusics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_GetMusics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).GetMusics(ctx, req.(*GetMusicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_CreateMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).CreateMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_CreateMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).CreateMusic(ctx, req.(*CreateMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_EditMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).EditMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_EditMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).EditMusic(ctx, req.(*EditMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_AddMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).AddMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_AddMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).AddMusic(ctx, req.(*AddMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicService_RemoveMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMusicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicServiceServer).RemoveMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicService_RemoveMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicServiceServer).RemoveMusic(ctx, req.(*RemoveMusicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicService_ServiceDesc is the grpc.ServiceDesc for MusicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.streaming.v1alpha1.MusicService",
	HandlerType: (*MusicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMusics",
			Handler:    _MusicService_GetMusics_Handler,
		},
		{
			MethodName: "CreateMusic",
			Handler:    _MusicService_CreateMusic_Handler,
		},
		{
			MethodName: "EditMusic",
			Handler:    _MusicService_EditMusic_Handler,
		},
		{
			MethodName: "AddMusic",
			Handler:    _MusicService_AddMusic_Handler,
		},
		{
			MethodName: "RemoveMusic",
			Handler:    _MusicService_RemoveMusic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/streaming/v1alpha1/music.proto",
}
