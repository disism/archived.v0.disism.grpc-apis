// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/streaming/v1alpha1/music_artist.proto

package streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MusicArtistService_CreateArtist_FullMethodName  = "/proto.streaming.v1alpha1.MusicArtistService/CreateArtist"
	MusicArtistService_SearchArtists_FullMethodName = "/proto.streaming.v1alpha1.MusicArtistService/SearchArtists"
)

// MusicArtistServiceClient is the client API for MusicArtistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicArtistServiceClient interface {
	CreateArtist(ctx context.Context, in *CreateArtistRequest, opts ...grpc.CallOption) (*CreateArtistResponse, error)
	SearchArtists(ctx context.Context, in *SearchArtistsRequest, opts ...grpc.CallOption) (*SearchArtistsResponse, error)
}

type musicArtistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicArtistServiceClient(cc grpc.ClientConnInterface) MusicArtistServiceClient {
	return &musicArtistServiceClient{cc}
}

func (c *musicArtistServiceClient) CreateArtist(ctx context.Context, in *CreateArtistRequest, opts ...grpc.CallOption) (*CreateArtistResponse, error) {
	out := new(CreateArtistResponse)
	err := c.cc.Invoke(ctx, MusicArtistService_CreateArtist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicArtistServiceClient) SearchArtists(ctx context.Context, in *SearchArtistsRequest, opts ...grpc.CallOption) (*SearchArtistsResponse, error) {
	out := new(SearchArtistsResponse)
	err := c.cc.Invoke(ctx, MusicArtistService_SearchArtists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicArtistServiceServer is the server API for MusicArtistService service.
// All implementations should embed UnimplementedMusicArtistServiceServer
// for forward compatibility
type MusicArtistServiceServer interface {
	CreateArtist(context.Context, *CreateArtistRequest) (*CreateArtistResponse, error)
	SearchArtists(context.Context, *SearchArtistsRequest) (*SearchArtistsResponse, error)
}

// UnimplementedMusicArtistServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMusicArtistServiceServer struct {
}

func (UnimplementedMusicArtistServiceServer) CreateArtist(context.Context, *CreateArtistRequest) (*CreateArtistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtist not implemented")
}
func (UnimplementedMusicArtistServiceServer) SearchArtists(context.Context, *SearchArtistsRequest) (*SearchArtistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchArtists not implemented")
}

// UnsafeMusicArtistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicArtistServiceServer will
// result in compilation errors.
type UnsafeMusicArtistServiceServer interface {
	mustEmbedUnimplementedMusicArtistServiceServer()
}

func RegisterMusicArtistServiceServer(s grpc.ServiceRegistrar, srv MusicArtistServiceServer) {
	s.RegisterService(&MusicArtistService_ServiceDesc, srv)
}

func _MusicArtistService_CreateArtist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicArtistServiceServer).CreateArtist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicArtistService_CreateArtist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicArtistServiceServer).CreateArtist(ctx, req.(*CreateArtistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicArtistService_SearchArtists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchArtistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicArtistServiceServer).SearchArtists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicArtistService_SearchArtists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicArtistServiceServer).SearchArtists(ctx, req.(*SearchArtistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicArtistService_ServiceDesc is the grpc.ServiceDesc for MusicArtistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicArtistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.streaming.v1alpha1.MusicArtistService",
	HandlerType: (*MusicArtistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArtist",
			Handler:    _MusicArtistService_CreateArtist_Handler,
		},
		{
			MethodName: "SearchArtists",
			Handler:    _MusicArtistService_SearchArtists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/streaming/v1alpha1/music_artist.proto",
}
