// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/streaming/v1alpha1/music_playlist.proto

package streaming

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreatePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaylistRequestMultiError, or nil if none found.
func (m *CreatePlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for CoverId

	// no validation rules for Private

	if len(errors) > 0 {
		return CreatePlaylistRequestMultiError(errors)
	}

	return nil
}

// CreatePlaylistRequestMultiError is an error wrapping multiple validation
// errors returned by CreatePlaylistRequest.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaylistRequestMultiError) AllErrors() []error { return m }

// CreatePlaylistRequestValidationError is the validation error returned by
// CreatePlaylistRequest.Validate if the designated constraints aren't met.
type CreatePlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaylistRequestValidationError) ErrorName() string {
	return "CreatePlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaylistRequestValidationError{}

// Validate checks the field values on CreatePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreatePlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreatePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreatePlaylistResponseMultiError, or nil if none found.
func (m *CreatePlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreatePlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetPlaylist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreatePlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreatePlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaylist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreatePlaylistResponseValidationError{
				field:  "Playlist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreatePlaylistResponseMultiError(errors)
	}

	return nil
}

// CreatePlaylistResponseMultiError is an error wrapping multiple validation
// errors returned by CreatePlaylistResponse.ValidateAll() if the designated
// constraints aren't met.
type CreatePlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreatePlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreatePlaylistResponseMultiError) AllErrors() []error { return m }

// CreatePlaylistResponseValidationError is the validation error returned by
// CreatePlaylistResponse.Validate if the designated constraints aren't met.
type CreatePlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePlaylistResponseValidationError) ErrorName() string {
	return "CreatePlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePlaylistResponseValidationError{}

// Validate checks the field values on GetPlaylistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlaylistsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlaylistsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlaylistsResponseMultiError, or nil if none found.
func (m *GetPlaylistsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlaylistsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetPlaylists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlaylistsResponseValidationError{
						field:  fmt.Sprintf("Playlists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlaylistsResponseValidationError{
						field:  fmt.Sprintf("Playlists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlaylistsResponseValidationError{
					field:  fmt.Sprintf("Playlists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPlaylistsResponseMultiError(errors)
	}

	return nil
}

// GetPlaylistsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPlaylistsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPlaylistsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlaylistsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlaylistsResponseMultiError) AllErrors() []error { return m }

// GetPlaylistsResponseValidationError is the validation error returned by
// GetPlaylistsResponse.Validate if the designated constraints aren't met.
type GetPlaylistsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlaylistsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlaylistsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlaylistsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlaylistsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlaylistsResponseValidationError) ErrorName() string {
	return "GetPlaylistsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlaylistsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlaylistsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlaylistsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlaylistsResponseValidationError{}

// Validate checks the field values on GetPlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlaylistRequestMultiError, or nil if none found.
func (m *GetPlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetPlaylistRequestMultiError(errors)
	}

	return nil
}

// GetPlaylistRequestMultiError is an error wrapping multiple validation errors
// returned by GetPlaylistRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlaylistRequestMultiError) AllErrors() []error { return m }

// GetPlaylistRequestValidationError is the validation error returned by
// GetPlaylistRequest.Validate if the designated constraints aren't met.
type GetPlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlaylistRequestValidationError) ErrorName() string {
	return "GetPlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlaylistRequestValidationError{}

// Validate checks the field values on GetPlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPlaylistResponseMultiError, or nil if none found.
func (m *GetPlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetPlaylist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaylist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPlaylistResponseValidationError{
				field:  "Playlist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMusics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPlaylistResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPlaylistResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPlaylistResponseValidationError{
					field:  fmt.Sprintf("Musics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPlaylistResponseMultiError(errors)
	}

	return nil
}

// GetPlaylistResponseMultiError is an error wrapping multiple validation
// errors returned by GetPlaylistResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPlaylistResponseMultiError) AllErrors() []error { return m }

// GetPlaylistResponseValidationError is the validation error returned by
// GetPlaylistResponse.Validate if the designated constraints aren't met.
type GetPlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPlaylistResponseValidationError) ErrorName() string {
	return "GetPlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPlaylistResponseValidationError{}

// Validate checks the field values on EditPlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPlaylistRequestMultiError, or nil if none found.
func (m *EditPlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for CoverId

	if len(errors) > 0 {
		return EditPlaylistRequestMultiError(errors)
	}

	return nil
}

// EditPlaylistRequestMultiError is an error wrapping multiple validation
// errors returned by EditPlaylistRequest.ValidateAll() if the designated
// constraints aren't met.
type EditPlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPlaylistRequestMultiError) AllErrors() []error { return m }

// EditPlaylistRequestValidationError is the validation error returned by
// EditPlaylistRequest.Validate if the designated constraints aren't met.
type EditPlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPlaylistRequestValidationError) ErrorName() string {
	return "EditPlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditPlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPlaylistRequestValidationError{}

// Validate checks the field values on EditPlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPlaylistResponseMultiError, or nil if none found.
func (m *EditPlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetPlaylist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaylist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditPlaylistResponseValidationError{
				field:  "Playlist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditPlaylistResponseMultiError(errors)
	}

	return nil
}

// EditPlaylistResponseMultiError is an error wrapping multiple validation
// errors returned by EditPlaylistResponse.ValidateAll() if the designated
// constraints aren't met.
type EditPlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPlaylistResponseMultiError) AllErrors() []error { return m }

// EditPlaylistResponseValidationError is the validation error returned by
// EditPlaylistResponse.Validate if the designated constraints aren't met.
type EditPlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPlaylistResponseValidationError) ErrorName() string {
	return "EditPlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditPlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPlaylistResponseValidationError{}

// Validate checks the field values on EditPlaylistPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPlaylistPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPlaylistPrivateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPlaylistPrivateRequestMultiError, or nil if none found.
func (m *EditPlaylistPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPlaylistPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Private

	if len(errors) > 0 {
		return EditPlaylistPrivateRequestMultiError(errors)
	}

	return nil
}

// EditPlaylistPrivateRequestMultiError is an error wrapping multiple
// validation errors returned by EditPlaylistPrivateRequest.ValidateAll() if
// the designated constraints aren't met.
type EditPlaylistPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPlaylistPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPlaylistPrivateRequestMultiError) AllErrors() []error { return m }

// EditPlaylistPrivateRequestValidationError is the validation error returned
// by EditPlaylistPrivateRequest.Validate if the designated constraints aren't met.
type EditPlaylistPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPlaylistPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPlaylistPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPlaylistPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPlaylistPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPlaylistPrivateRequestValidationError) ErrorName() string {
	return "EditPlaylistPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditPlaylistPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPlaylistPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPlaylistPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPlaylistPrivateRequestValidationError{}

// Validate checks the field values on EditPlaylistPrivateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPlaylistPrivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPlaylistPrivateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPlaylistPrivateResponseMultiError, or nil if none found.
func (m *EditPlaylistPrivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPlaylistPrivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	// no validation rules for Status

	if len(errors) > 0 {
		return EditPlaylistPrivateResponseMultiError(errors)
	}

	return nil
}

// EditPlaylistPrivateResponseMultiError is an error wrapping multiple
// validation errors returned by EditPlaylistPrivateResponse.ValidateAll() if
// the designated constraints aren't met.
type EditPlaylistPrivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPlaylistPrivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPlaylistPrivateResponseMultiError) AllErrors() []error { return m }

// EditPlaylistPrivateResponseValidationError is the validation error returned
// by EditPlaylistPrivateResponse.Validate if the designated constraints
// aren't met.
type EditPlaylistPrivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPlaylistPrivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPlaylistPrivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPlaylistPrivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPlaylistPrivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPlaylistPrivateResponseValidationError) ErrorName() string {
	return "EditPlaylistPrivateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditPlaylistPrivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPlaylistPrivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPlaylistPrivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPlaylistPrivateResponseValidationError{}

// Validate checks the field values on DeletePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePlaylistRequestMultiError, or nil if none found.
func (m *DeletePlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeletePlaylistRequestMultiError(errors)
	}

	return nil
}

// DeletePlaylistRequestMultiError is an error wrapping multiple validation
// errors returned by DeletePlaylistRequest.ValidateAll() if the designated
// constraints aren't met.
type DeletePlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePlaylistRequestMultiError) AllErrors() []error { return m }

// DeletePlaylistRequestValidationError is the validation error returned by
// DeletePlaylistRequest.Validate if the designated constraints aren't met.
type DeletePlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePlaylistRequestValidationError) ErrorName() string {
	return "DeletePlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePlaylistRequestValidationError{}

// Validate checks the field values on DeletePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeletePlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeletePlaylistResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeletePlaylistResponseMultiError, or nil if none found.
func (m *DeletePlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeletePlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeletePlaylistResponseMultiError(errors)
	}

	return nil
}

// DeletePlaylistResponseMultiError is an error wrapping multiple validation
// errors returned by DeletePlaylistResponse.ValidateAll() if the designated
// constraints aren't met.
type DeletePlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeletePlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeletePlaylistResponseMultiError) AllErrors() []error { return m }

// DeletePlaylistResponseValidationError is the validation error returned by
// DeletePlaylistResponse.Validate if the designated constraints aren't met.
type DeletePlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePlaylistResponseValidationError) ErrorName() string {
	return "DeletePlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePlaylistResponseValidationError{}

// Validate checks the field values on AddMusicToPlaylistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMusicToPlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMusicToPlaylistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMusicToPlaylistRequestMultiError, or nil if none found.
func (m *AddMusicToPlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMusicToPlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddMusicToPlaylistRequestMultiError(errors)
	}

	return nil
}

// AddMusicToPlaylistRequestMultiError is an error wrapping multiple validation
// errors returned by AddMusicToPlaylistRequest.ValidateAll() if the
// designated constraints aren't met.
type AddMusicToPlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMusicToPlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMusicToPlaylistRequestMultiError) AllErrors() []error { return m }

// AddMusicToPlaylistRequestValidationError is the validation error returned by
// AddMusicToPlaylistRequest.Validate if the designated constraints aren't met.
type AddMusicToPlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMusicToPlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMusicToPlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMusicToPlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMusicToPlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMusicToPlaylistRequestValidationError) ErrorName() string {
	return "AddMusicToPlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMusicToPlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMusicToPlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMusicToPlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMusicToPlaylistRequestValidationError{}

// Validate checks the field values on AddMusicToPlaylistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddMusicToPlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMusicToPlaylistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMusicToPlaylistResponseMultiError, or nil if none found.
func (m *AddMusicToPlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMusicToPlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetPlaylist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddMusicToPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddMusicToPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaylist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMusicToPlaylistResponseValidationError{
				field:  "Playlist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMusics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddMusicToPlaylistResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddMusicToPlaylistResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddMusicToPlaylistResponseValidationError{
					field:  fmt.Sprintf("Musics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddMusicToPlaylistResponseMultiError(errors)
	}

	return nil
}

// AddMusicToPlaylistResponseMultiError is an error wrapping multiple
// validation errors returned by AddMusicToPlaylistResponse.ValidateAll() if
// the designated constraints aren't met.
type AddMusicToPlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMusicToPlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMusicToPlaylistResponseMultiError) AllErrors() []error { return m }

// AddMusicToPlaylistResponseValidationError is the validation error returned
// by AddMusicToPlaylistResponse.Validate if the designated constraints aren't met.
type AddMusicToPlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMusicToPlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMusicToPlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMusicToPlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMusicToPlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMusicToPlaylistResponseValidationError) ErrorName() string {
	return "AddMusicToPlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMusicToPlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMusicToPlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMusicToPlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMusicToPlaylistResponseValidationError{}

// Validate checks the field values on RemoveMusicFromPlaylistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMusicFromPlaylistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMusicFromPlaylistRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveMusicFromPlaylistRequestMultiError, or nil if none found.
func (m *RemoveMusicFromPlaylistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMusicFromPlaylistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveMusicFromPlaylistRequestMultiError(errors)
	}

	return nil
}

// RemoveMusicFromPlaylistRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveMusicFromPlaylistRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveMusicFromPlaylistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMusicFromPlaylistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMusicFromPlaylistRequestMultiError) AllErrors() []error { return m }

// RemoveMusicFromPlaylistRequestValidationError is the validation error
// returned by RemoveMusicFromPlaylistRequest.Validate if the designated
// constraints aren't met.
type RemoveMusicFromPlaylistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMusicFromPlaylistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMusicFromPlaylistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMusicFromPlaylistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMusicFromPlaylistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMusicFromPlaylistRequestValidationError) ErrorName() string {
	return "RemoveMusicFromPlaylistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMusicFromPlaylistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMusicFromPlaylistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMusicFromPlaylistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMusicFromPlaylistRequestValidationError{}

// Validate checks the field values on RemoveMusicFromPlaylistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMusicFromPlaylistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMusicFromPlaylistResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveMusicFromPlaylistResponseMultiError, or nil if none found.
func (m *RemoveMusicFromPlaylistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMusicFromPlaylistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetPlaylist()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveMusicFromPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveMusicFromPlaylistResponseValidationError{
					field:  "Playlist",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPlaylist()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMusicFromPlaylistResponseValidationError{
				field:  "Playlist",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMusics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RemoveMusicFromPlaylistResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RemoveMusicFromPlaylistResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RemoveMusicFromPlaylistResponseValidationError{
					field:  fmt.Sprintf("Musics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RemoveMusicFromPlaylistResponseMultiError(errors)
	}

	return nil
}

// RemoveMusicFromPlaylistResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveMusicFromPlaylistResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveMusicFromPlaylistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMusicFromPlaylistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMusicFromPlaylistResponseMultiError) AllErrors() []error { return m }

// RemoveMusicFromPlaylistResponseValidationError is the validation error
// returned by RemoveMusicFromPlaylistResponse.Validate if the designated
// constraints aren't met.
type RemoveMusicFromPlaylistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMusicFromPlaylistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMusicFromPlaylistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMusicFromPlaylistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMusicFromPlaylistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMusicFromPlaylistResponseValidationError) ErrorName() string {
	return "RemoveMusicFromPlaylistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMusicFromPlaylistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMusicFromPlaylistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMusicFromPlaylistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMusicFromPlaylistResponseValidationError{}
