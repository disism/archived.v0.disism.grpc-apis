// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/streaming/v1alpha1/music_playlist.proto

package streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MusicPlaylistService_CreatePlaylist_FullMethodName          = "/proto.streaming.v1alpha1.MusicPlaylistService/CreatePlaylist"
	MusicPlaylistService_GetPlaylists_FullMethodName            = "/proto.streaming.v1alpha1.MusicPlaylistService/GetPlaylists"
	MusicPlaylistService_GetPlaylist_FullMethodName             = "/proto.streaming.v1alpha1.MusicPlaylistService/GetPlaylist"
	MusicPlaylistService_EditPlaylist_FullMethodName            = "/proto.streaming.v1alpha1.MusicPlaylistService/EditPlaylist"
	MusicPlaylistService_EditPlaylistPrivate_FullMethodName     = "/proto.streaming.v1alpha1.MusicPlaylistService/EditPlaylistPrivate"
	MusicPlaylistService_DeletePlaylist_FullMethodName          = "/proto.streaming.v1alpha1.MusicPlaylistService/DeletePlaylist"
	MusicPlaylistService_AddMusicToPlaylist_FullMethodName      = "/proto.streaming.v1alpha1.MusicPlaylistService/AddMusicToPlaylist"
	MusicPlaylistService_RemoveMusicFromPlaylist_FullMethodName = "/proto.streaming.v1alpha1.MusicPlaylistService/RemoveMusicFromPlaylist"
)

// MusicPlaylistServiceClient is the client API for MusicPlaylistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicPlaylistServiceClient interface {
	CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error)
	GetPlaylists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPlaylistsResponse, error)
	GetPlaylist(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*GetPlaylistResponse, error)
	EditPlaylist(ctx context.Context, in *EditPlaylistRequest, opts ...grpc.CallOption) (*EditPlaylistResponse, error)
	EditPlaylistPrivate(ctx context.Context, in *EditPlaylistPrivateRequest, opts ...grpc.CallOption) (*EditPlaylistPrivateResponse, error)
	DeletePlaylist(ctx context.Context, in *DeletePlaylistRequest, opts ...grpc.CallOption) (*DeletePlaylistResponse, error)
	AddMusicToPlaylist(ctx context.Context, in *AddMusicToPlaylistRequest, opts ...grpc.CallOption) (*AddMusicToPlaylistResponse, error)
	RemoveMusicFromPlaylist(ctx context.Context, in *RemoveMusicFromPlaylistRequest, opts ...grpc.CallOption) (*RemoveMusicFromPlaylistResponse, error)
}

type musicPlaylistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicPlaylistServiceClient(cc grpc.ClientConnInterface) MusicPlaylistServiceClient {
	return &musicPlaylistServiceClient{cc}
}

func (c *musicPlaylistServiceClient) CreatePlaylist(ctx context.Context, in *CreatePlaylistRequest, opts ...grpc.CallOption) (*CreatePlaylistResponse, error) {
	out := new(CreatePlaylistResponse)
	err := c.cc.Invoke(ctx, MusicPlaylistService_CreatePlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlaylistServiceClient) GetPlaylists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetPlaylistsResponse, error) {
	out := new(GetPlaylistsResponse)
	err := c.cc.Invoke(ctx, MusicPlaylistService_GetPlaylists_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlaylistServiceClient) GetPlaylist(ctx context.Context, in *GetPlaylistRequest, opts ...grpc.CallOption) (*GetPlaylistResponse, error) {
	out := new(GetPlaylistResponse)
	err := c.cc.Invoke(ctx, MusicPlaylistService_GetPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlaylistServiceClient) EditPlaylist(ctx context.Context, in *EditPlaylistRequest, opts ...grpc.CallOption) (*EditPlaylistResponse, error) {
	out := new(EditPlaylistResponse)
	err := c.cc.Invoke(ctx, MusicPlaylistService_EditPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlaylistServiceClient) EditPlaylistPrivate(ctx context.Context, in *EditPlaylistPrivateRequest, opts ...grpc.CallOption) (*EditPlaylistPrivateResponse, error) {
	out := new(EditPlaylistPrivateResponse)
	err := c.cc.Invoke(ctx, MusicPlaylistService_EditPlaylistPrivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlaylistServiceClient) DeletePlaylist(ctx context.Context, in *DeletePlaylistRequest, opts ...grpc.CallOption) (*DeletePlaylistResponse, error) {
	out := new(DeletePlaylistResponse)
	err := c.cc.Invoke(ctx, MusicPlaylistService_DeletePlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlaylistServiceClient) AddMusicToPlaylist(ctx context.Context, in *AddMusicToPlaylistRequest, opts ...grpc.CallOption) (*AddMusicToPlaylistResponse, error) {
	out := new(AddMusicToPlaylistResponse)
	err := c.cc.Invoke(ctx, MusicPlaylistService_AddMusicToPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicPlaylistServiceClient) RemoveMusicFromPlaylist(ctx context.Context, in *RemoveMusicFromPlaylistRequest, opts ...grpc.CallOption) (*RemoveMusicFromPlaylistResponse, error) {
	out := new(RemoveMusicFromPlaylistResponse)
	err := c.cc.Invoke(ctx, MusicPlaylistService_RemoveMusicFromPlaylist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicPlaylistServiceServer is the server API for MusicPlaylistService service.
// All implementations should embed UnimplementedMusicPlaylistServiceServer
// for forward compatibility
type MusicPlaylistServiceServer interface {
	CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error)
	GetPlaylists(context.Context, *emptypb.Empty) (*GetPlaylistsResponse, error)
	GetPlaylist(context.Context, *GetPlaylistRequest) (*GetPlaylistResponse, error)
	EditPlaylist(context.Context, *EditPlaylistRequest) (*EditPlaylistResponse, error)
	EditPlaylistPrivate(context.Context, *EditPlaylistPrivateRequest) (*EditPlaylistPrivateResponse, error)
	DeletePlaylist(context.Context, *DeletePlaylistRequest) (*DeletePlaylistResponse, error)
	AddMusicToPlaylist(context.Context, *AddMusicToPlaylistRequest) (*AddMusicToPlaylistResponse, error)
	RemoveMusicFromPlaylist(context.Context, *RemoveMusicFromPlaylistRequest) (*RemoveMusicFromPlaylistResponse, error)
}

// UnimplementedMusicPlaylistServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMusicPlaylistServiceServer struct {
}

func (UnimplementedMusicPlaylistServiceServer) CreatePlaylist(context.Context, *CreatePlaylistRequest) (*CreatePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlaylist not implemented")
}
func (UnimplementedMusicPlaylistServiceServer) GetPlaylists(context.Context, *emptypb.Empty) (*GetPlaylistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylists not implemented")
}
func (UnimplementedMusicPlaylistServiceServer) GetPlaylist(context.Context, *GetPlaylistRequest) (*GetPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlaylist not implemented")
}
func (UnimplementedMusicPlaylistServiceServer) EditPlaylist(context.Context, *EditPlaylistRequest) (*EditPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPlaylist not implemented")
}
func (UnimplementedMusicPlaylistServiceServer) EditPlaylistPrivate(context.Context, *EditPlaylistPrivateRequest) (*EditPlaylistPrivateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPlaylistPrivate not implemented")
}
func (UnimplementedMusicPlaylistServiceServer) DeletePlaylist(context.Context, *DeletePlaylistRequest) (*DeletePlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlaylist not implemented")
}
func (UnimplementedMusicPlaylistServiceServer) AddMusicToPlaylist(context.Context, *AddMusicToPlaylistRequest) (*AddMusicToPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMusicToPlaylist not implemented")
}
func (UnimplementedMusicPlaylistServiceServer) RemoveMusicFromPlaylist(context.Context, *RemoveMusicFromPlaylistRequest) (*RemoveMusicFromPlaylistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMusicFromPlaylist not implemented")
}

// UnsafeMusicPlaylistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicPlaylistServiceServer will
// result in compilation errors.
type UnsafeMusicPlaylistServiceServer interface {
	mustEmbedUnimplementedMusicPlaylistServiceServer()
}

func RegisterMusicPlaylistServiceServer(s grpc.ServiceRegistrar, srv MusicPlaylistServiceServer) {
	s.RegisterService(&MusicPlaylistService_ServiceDesc, srv)
}

func _MusicPlaylistService_CreatePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlaylistServiceServer).CreatePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicPlaylistService_CreatePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlaylistServiceServer).CreatePlaylist(ctx, req.(*CreatePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlaylistService_GetPlaylists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlaylistServiceServer).GetPlaylists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicPlaylistService_GetPlaylists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlaylistServiceServer).GetPlaylists(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlaylistService_GetPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlaylistServiceServer).GetPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicPlaylistService_GetPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlaylistServiceServer).GetPlaylist(ctx, req.(*GetPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlaylistService_EditPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlaylistServiceServer).EditPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicPlaylistService_EditPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlaylistServiceServer).EditPlaylist(ctx, req.(*EditPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlaylistService_EditPlaylistPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPlaylistPrivateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlaylistServiceServer).EditPlaylistPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicPlaylistService_EditPlaylistPrivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlaylistServiceServer).EditPlaylistPrivate(ctx, req.(*EditPlaylistPrivateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlaylistService_DeletePlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlaylistServiceServer).DeletePlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicPlaylistService_DeletePlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlaylistServiceServer).DeletePlaylist(ctx, req.(*DeletePlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlaylistService_AddMusicToPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMusicToPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlaylistServiceServer).AddMusicToPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicPlaylistService_AddMusicToPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlaylistServiceServer).AddMusicToPlaylist(ctx, req.(*AddMusicToPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicPlaylistService_RemoveMusicFromPlaylist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMusicFromPlaylistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicPlaylistServiceServer).RemoveMusicFromPlaylist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicPlaylistService_RemoveMusicFromPlaylist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicPlaylistServiceServer).RemoveMusicFromPlaylist(ctx, req.(*RemoveMusicFromPlaylistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicPlaylistService_ServiceDesc is the grpc.ServiceDesc for MusicPlaylistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicPlaylistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.streaming.v1alpha1.MusicPlaylistService",
	HandlerType: (*MusicPlaylistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlaylist",
			Handler:    _MusicPlaylistService_CreatePlaylist_Handler,
		},
		{
			MethodName: "GetPlaylists",
			Handler:    _MusicPlaylistService_GetPlaylists_Handler,
		},
		{
			MethodName: "GetPlaylist",
			Handler:    _MusicPlaylistService_GetPlaylist_Handler,
		},
		{
			MethodName: "EditPlaylist",
			Handler:    _MusicPlaylistService_EditPlaylist_Handler,
		},
		{
			MethodName: "EditPlaylistPrivate",
			Handler:    _MusicPlaylistService_EditPlaylistPrivate_Handler,
		},
		{
			MethodName: "DeletePlaylist",
			Handler:    _MusicPlaylistService_DeletePlaylist_Handler,
		},
		{
			MethodName: "AddMusicToPlaylist",
			Handler:    _MusicPlaylistService_AddMusicToPlaylist_Handler,
		},
		{
			MethodName: "RemoveMusicFromPlaylist",
			Handler:    _MusicPlaylistService_RemoveMusicFromPlaylist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/streaming/v1alpha1/music_playlist.proto",
}
