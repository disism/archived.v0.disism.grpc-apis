// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/streaming/v1alpha1/music_genres.proto

package streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MusicGenreService_CreateGenres_FullMethodName = "/proto.streaming.v1alpha1.MusicGenreService/CreateGenres"
	MusicGenreService_SearchGenres_FullMethodName = "/proto.streaming.v1alpha1.MusicGenreService/SearchGenres"
)

// MusicGenreServiceClient is the client API for MusicGenreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MusicGenreServiceClient interface {
	CreateGenres(ctx context.Context, in *CreateGenresRequest, opts ...grpc.CallOption) (*CreateGenresResponse, error)
	SearchGenres(ctx context.Context, in *SearchGenresRequest, opts ...grpc.CallOption) (*SearchGenresResponse, error)
}

type musicGenreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMusicGenreServiceClient(cc grpc.ClientConnInterface) MusicGenreServiceClient {
	return &musicGenreServiceClient{cc}
}

func (c *musicGenreServiceClient) CreateGenres(ctx context.Context, in *CreateGenresRequest, opts ...grpc.CallOption) (*CreateGenresResponse, error) {
	out := new(CreateGenresResponse)
	err := c.cc.Invoke(ctx, MusicGenreService_CreateGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *musicGenreServiceClient) SearchGenres(ctx context.Context, in *SearchGenresRequest, opts ...grpc.CallOption) (*SearchGenresResponse, error) {
	out := new(SearchGenresResponse)
	err := c.cc.Invoke(ctx, MusicGenreService_SearchGenres_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MusicGenreServiceServer is the server API for MusicGenreService service.
// All implementations should embed UnimplementedMusicGenreServiceServer
// for forward compatibility
type MusicGenreServiceServer interface {
	CreateGenres(context.Context, *CreateGenresRequest) (*CreateGenresResponse, error)
	SearchGenres(context.Context, *SearchGenresRequest) (*SearchGenresResponse, error)
}

// UnimplementedMusicGenreServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMusicGenreServiceServer struct {
}

func (UnimplementedMusicGenreServiceServer) CreateGenres(context.Context, *CreateGenresRequest) (*CreateGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenres not implemented")
}
func (UnimplementedMusicGenreServiceServer) SearchGenres(context.Context, *SearchGenresRequest) (*SearchGenresResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGenres not implemented")
}

// UnsafeMusicGenreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MusicGenreServiceServer will
// result in compilation errors.
type UnsafeMusicGenreServiceServer interface {
	mustEmbedUnimplementedMusicGenreServiceServer()
}

func RegisterMusicGenreServiceServer(s grpc.ServiceRegistrar, srv MusicGenreServiceServer) {
	s.RegisterService(&MusicGenreService_ServiceDesc, srv)
}

func _MusicGenreService_CreateGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicGenreServiceServer).CreateGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicGenreService_CreateGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicGenreServiceServer).CreateGenres(ctx, req.(*CreateGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MusicGenreService_SearchGenres_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGenresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MusicGenreServiceServer).SearchGenres(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MusicGenreService_SearchGenres_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MusicGenreServiceServer).SearchGenres(ctx, req.(*SearchGenresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MusicGenreService_ServiceDesc is the grpc.ServiceDesc for MusicGenreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MusicGenreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.streaming.v1alpha1.MusicGenreService",
	HandlerType: (*MusicGenreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGenres",
			Handler:    _MusicGenreService_CreateGenres_Handler,
		},
		{
			MethodName: "SearchGenres",
			Handler:    _MusicGenreService_SearchGenres_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/streaming/v1alpha1/music_genres.proto",
}
