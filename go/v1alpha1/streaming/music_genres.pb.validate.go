// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/streaming/v1alpha1/music_genres.proto

package streaming

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateGenresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGenresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGenresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGenresRequestMultiError, or nil if none found.
func (m *CreateGenresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGenresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateGenresRequestMultiError(errors)
	}

	return nil
}

// CreateGenresRequestMultiError is an error wrapping multiple validation
// errors returned by CreateGenresRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateGenresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGenresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGenresRequestMultiError) AllErrors() []error { return m }

// CreateGenresRequestValidationError is the validation error returned by
// CreateGenresRequest.Validate if the designated constraints aren't met.
type CreateGenresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGenresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGenresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGenresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGenresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGenresRequestValidationError) ErrorName() string {
	return "CreateGenresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGenresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGenresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGenresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGenresRequestValidationError{}

// Validate checks the field values on CreateGenresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateGenresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateGenresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateGenresResponseMultiError, or nil if none found.
func (m *CreateGenresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateGenresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetGenres() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateGenresResponseValidationError{
						field:  fmt.Sprintf("Genres[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateGenresResponseValidationError{
						field:  fmt.Sprintf("Genres[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateGenresResponseValidationError{
					field:  fmt.Sprintf("Genres[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateGenresResponseMultiError(errors)
	}

	return nil
}

// CreateGenresResponseMultiError is an error wrapping multiple validation
// errors returned by CreateGenresResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateGenresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateGenresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateGenresResponseMultiError) AllErrors() []error { return m }

// CreateGenresResponseValidationError is the validation error returned by
// CreateGenresResponse.Validate if the designated constraints aren't met.
type CreateGenresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateGenresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateGenresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateGenresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateGenresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateGenresResponseValidationError) ErrorName() string {
	return "CreateGenresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateGenresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateGenresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateGenresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateGenresResponseValidationError{}

// Validate checks the field values on SearchGenresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchGenresRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchGenresRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchGenresRequestMultiError, or nil if none found.
func (m *SearchGenresRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchGenresRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return SearchGenresRequestMultiError(errors)
	}

	return nil
}

// SearchGenresRequestMultiError is an error wrapping multiple validation
// errors returned by SearchGenresRequest.ValidateAll() if the designated
// constraints aren't met.
type SearchGenresRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchGenresRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchGenresRequestMultiError) AllErrors() []error { return m }

// SearchGenresRequestValidationError is the validation error returned by
// SearchGenresRequest.Validate if the designated constraints aren't met.
type SearchGenresRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchGenresRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchGenresRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchGenresRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchGenresRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchGenresRequestValidationError) ErrorName() string {
	return "SearchGenresRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchGenresRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchGenresRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchGenresRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchGenresRequestValidationError{}

// Validate checks the field values on SearchGenresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchGenresResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchGenresResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchGenresResponseMultiError, or nil if none found.
func (m *SearchGenresResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchGenresResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetGenres() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchGenresResponseValidationError{
						field:  fmt.Sprintf("Genres[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchGenresResponseValidationError{
						field:  fmt.Sprintf("Genres[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchGenresResponseValidationError{
					field:  fmt.Sprintf("Genres[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SearchGenresResponseMultiError(errors)
	}

	return nil
}

// SearchGenresResponseMultiError is an error wrapping multiple validation
// errors returned by SearchGenresResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchGenresResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchGenresResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchGenresResponseMultiError) AllErrors() []error { return m }

// SearchGenresResponseValidationError is the validation error returned by
// SearchGenresResponse.Validate if the designated constraints aren't met.
type SearchGenresResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchGenresResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchGenresResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchGenresResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchGenresResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchGenresResponseValidationError) ErrorName() string {
	return "SearchGenresResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchGenresResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchGenresResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchGenresResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchGenresResponseValidationError{}
