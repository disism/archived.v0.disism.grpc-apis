// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/streaming/v1alpha1/music.proto

package streaming

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetMusicsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMusicsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMusicsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMusicsRequestMultiError, or nil if none found.
func (m *GetMusicsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMusicsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cid

	if len(errors) > 0 {
		return GetMusicsRequestMultiError(errors)
	}

	return nil
}

// GetMusicsRequestMultiError is an error wrapping multiple validation errors
// returned by GetMusicsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMusicsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMusicsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMusicsRequestMultiError) AllErrors() []error { return m }

// GetMusicsRequestValidationError is the validation error returned by
// GetMusicsRequest.Validate if the designated constraints aren't met.
type GetMusicsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMusicsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMusicsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMusicsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMusicsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMusicsRequestValidationError) ErrorName() string { return "GetMusicsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMusicsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMusicsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMusicsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMusicsRequestValidationError{}

// Validate checks the field values on GetMusicsWithCIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMusicsWithCIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMusicsWithCIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMusicsWithCIDResponseMultiError, or nil if none found.
func (m *GetMusicsWithCIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMusicsWithCIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetMusics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMusicsWithCIDResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMusicsWithCIDResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMusicsWithCIDResponseValidationError{
					field:  fmt.Sprintf("Musics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMusicsWithCIDResponseMultiError(errors)
	}

	return nil
}

// GetMusicsWithCIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetMusicsWithCIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMusicsWithCIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMusicsWithCIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMusicsWithCIDResponseMultiError) AllErrors() []error { return m }

// GetMusicsWithCIDResponseValidationError is the validation error returned by
// GetMusicsWithCIDResponse.Validate if the designated constraints aren't met.
type GetMusicsWithCIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMusicsWithCIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMusicsWithCIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMusicsWithCIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMusicsWithCIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMusicsWithCIDResponseValidationError) ErrorName() string {
	return "GetMusicsWithCIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMusicsWithCIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMusicsWithCIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMusicsWithCIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMusicsWithCIDResponseValidationError{}

// Validate checks the field values on CreateMusic with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateMusic) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMusic with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateMusicMultiError, or
// nil if none found.
func (m *CreateMusic) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMusic) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cid

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Duration

	if len(errors) > 0 {
		return CreateMusicMultiError(errors)
	}

	return nil
}

// CreateMusicMultiError is an error wrapping multiple validation errors
// returned by CreateMusic.ValidateAll() if the designated constraints aren't met.
type CreateMusicMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMusicMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMusicMultiError) AllErrors() []error { return m }

// CreateMusicValidationError is the validation error returned by
// CreateMusic.Validate if the designated constraints aren't met.
type CreateMusicValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMusicValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMusicValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMusicValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMusicValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMusicValidationError) ErrorName() string { return "CreateMusicValidationError" }

// Error satisfies the builtin error interface
func (e CreateMusicValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMusic.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMusicValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMusicValidationError{}

// Validate checks the field values on CreateMusicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMusicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMusicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMusicRequestMultiError, or nil if none found.
func (m *CreateMusicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMusicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMusics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMusicRequestValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMusicRequestValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMusicRequestValidationError{
					field:  fmt.Sprintf("Musics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMusicRequestMultiError(errors)
	}

	return nil
}

// CreateMusicRequestMultiError is an error wrapping multiple validation errors
// returned by CreateMusicRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateMusicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMusicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMusicRequestMultiError) AllErrors() []error { return m }

// CreateMusicRequestValidationError is the validation error returned by
// CreateMusicRequest.Validate if the designated constraints aren't met.
type CreateMusicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMusicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMusicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMusicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMusicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMusicRequestValidationError) ErrorName() string {
	return "CreateMusicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMusicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMusicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMusicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMusicRequestValidationError{}

// Validate checks the field values on MusicExists with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MusicExists) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MusicExists with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MusicExistsMultiError, or
// nil if none found.
func (m *MusicExists) ValidateAll() error {
	return m.validate(true)
}

func (m *MusicExists) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetMusics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MusicExistsValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MusicExistsValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MusicExistsValidationError{
					field:  fmt.Sprintf("Musics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MusicExistsMultiError(errors)
	}

	return nil
}

// MusicExistsMultiError is an error wrapping multiple validation errors
// returned by MusicExists.ValidateAll() if the designated constraints aren't met.
type MusicExistsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MusicExistsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MusicExistsMultiError) AllErrors() []error { return m }

// MusicExistsValidationError is the validation error returned by
// MusicExists.Validate if the designated constraints aren't met.
type MusicExistsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MusicExistsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MusicExistsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MusicExistsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MusicExistsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MusicExistsValidationError) ErrorName() string { return "MusicExistsValidationError" }

// Error satisfies the builtin error interface
func (e MusicExistsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMusicExists.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MusicExistsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MusicExistsValidationError{}

// Validate checks the field values on CreateMusicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMusicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMusicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMusicResponseMultiError, or nil if none found.
func (m *CreateMusicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMusicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetMusics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMusicResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMusicResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMusicResponseValidationError{
					field:  fmt.Sprintf("Musics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExists() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateMusicResponseValidationError{
						field:  fmt.Sprintf("Exists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateMusicResponseValidationError{
						field:  fmt.Sprintf("Exists[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateMusicResponseValidationError{
					field:  fmt.Sprintf("Exists[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateMusicResponseMultiError(errors)
	}

	return nil
}

// CreateMusicResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMusicResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMusicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMusicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMusicResponseMultiError) AllErrors() []error { return m }

// CreateMusicResponseValidationError is the validation error returned by
// CreateMusicResponse.Validate if the designated constraints aren't met.
type CreateMusicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMusicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMusicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMusicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMusicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMusicResponseValidationError) ErrorName() string {
	return "CreateMusicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMusicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMusicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMusicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMusicResponseValidationError{}

// Validate checks the field values on GetMusicsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMusicsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMusicsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMusicsResponseMultiError, or nil if none found.
func (m *GetMusicsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMusicsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	for idx, item := range m.GetMusics() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMusicsResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMusicsResponseValidationError{
						field:  fmt.Sprintf("Musics[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMusicsResponseValidationError{
					field:  fmt.Sprintf("Musics[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMusicsResponseMultiError(errors)
	}

	return nil
}

// GetMusicsResponseMultiError is an error wrapping multiple validation errors
// returned by GetMusicsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMusicsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMusicsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMusicsResponseMultiError) AllErrors() []error { return m }

// GetMusicsResponseValidationError is the validation error returned by
// GetMusicsResponse.Validate if the designated constraints aren't met.
type GetMusicsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMusicsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMusicsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMusicsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMusicsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMusicsResponseValidationError) ErrorName() string {
	return "GetMusicsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMusicsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMusicsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMusicsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMusicsResponseValidationError{}

// Validate checks the field values on EditMusicRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditMusicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditMusicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditMusicRequestMultiError, or nil if none found.
func (m *EditMusicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditMusicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for AlbumId

	if len(errors) > 0 {
		return EditMusicRequestMultiError(errors)
	}

	return nil
}

// EditMusicRequestMultiError is an error wrapping multiple validation errors
// returned by EditMusicRequest.ValidateAll() if the designated constraints
// aren't met.
type EditMusicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditMusicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditMusicRequestMultiError) AllErrors() []error { return m }

// EditMusicRequestValidationError is the validation error returned by
// EditMusicRequest.Validate if the designated constraints aren't met.
type EditMusicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditMusicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditMusicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditMusicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditMusicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditMusicRequestValidationError) ErrorName() string { return "EditMusicRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditMusicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditMusicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditMusicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditMusicRequestValidationError{}

// Validate checks the field values on EditMusicResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditMusicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditMusicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditMusicResponseMultiError, or nil if none found.
func (m *EditMusicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditMusicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetMusic()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditMusicResponseValidationError{
					field:  "Music",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditMusicResponseValidationError{
					field:  "Music",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMusic()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditMusicResponseValidationError{
				field:  "Music",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditMusicResponseMultiError(errors)
	}

	return nil
}

// EditMusicResponseMultiError is an error wrapping multiple validation errors
// returned by EditMusicResponse.ValidateAll() if the designated constraints
// aren't met.
type EditMusicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditMusicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditMusicResponseMultiError) AllErrors() []error { return m }

// EditMusicResponseValidationError is the validation error returned by
// EditMusicResponse.Validate if the designated constraints aren't met.
type EditMusicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditMusicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditMusicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditMusicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditMusicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditMusicResponseValidationError) ErrorName() string {
	return "EditMusicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditMusicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditMusicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditMusicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditMusicResponseValidationError{}

// Validate checks the field values on AddMusicRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddMusicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMusicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMusicRequestMultiError, or nil if none found.
func (m *AddMusicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMusicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddMusicRequestMultiError(errors)
	}

	return nil
}

// AddMusicRequestMultiError is an error wrapping multiple validation errors
// returned by AddMusicRequest.ValidateAll() if the designated constraints
// aren't met.
type AddMusicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMusicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMusicRequestMultiError) AllErrors() []error { return m }

// AddMusicRequestValidationError is the validation error returned by
// AddMusicRequest.Validate if the designated constraints aren't met.
type AddMusicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMusicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMusicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMusicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMusicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMusicRequestValidationError) ErrorName() string { return "AddMusicRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddMusicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMusicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMusicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMusicRequestValidationError{}

// Validate checks the field values on AddMusicResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddMusicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddMusicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddMusicResponseMultiError, or nil if none found.
func (m *AddMusicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddMusicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return AddMusicResponseMultiError(errors)
	}

	return nil
}

// AddMusicResponseMultiError is an error wrapping multiple validation errors
// returned by AddMusicResponse.ValidateAll() if the designated constraints
// aren't met.
type AddMusicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddMusicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddMusicResponseMultiError) AllErrors() []error { return m }

// AddMusicResponseValidationError is the validation error returned by
// AddMusicResponse.Validate if the designated constraints aren't met.
type AddMusicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMusicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMusicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMusicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMusicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMusicResponseValidationError) ErrorName() string { return "AddMusicResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddMusicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMusicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMusicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMusicResponseValidationError{}

// Validate checks the field values on RemoveMusicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMusicRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMusicRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveMusicRequestMultiError, or nil if none found.
func (m *RemoveMusicRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMusicRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveMusicRequestMultiError(errors)
	}

	return nil
}

// RemoveMusicRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveMusicRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveMusicRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMusicRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMusicRequestMultiError) AllErrors() []error { return m }

// RemoveMusicRequestValidationError is the validation error returned by
// RemoveMusicRequest.Validate if the designated constraints aren't met.
type RemoveMusicRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMusicRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMusicRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMusicRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMusicRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMusicRequestValidationError) ErrorName() string {
	return "RemoveMusicRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMusicRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMusicRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMusicRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMusicRequestValidationError{}

// Validate checks the field values on RemoveMusicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMusicResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMusicResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveMusicResponseMultiError, or nil if none found.
func (m *RemoveMusicResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMusicResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return RemoveMusicResponseMultiError(errors)
	}

	return nil
}

// RemoveMusicResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveMusicResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveMusicResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMusicResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMusicResponseMultiError) AllErrors() []error { return m }

// RemoveMusicResponseValidationError is the validation error returned by
// RemoveMusicResponse.Validate if the designated constraints aren't met.
type RemoveMusicResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMusicResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMusicResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMusicResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMusicResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMusicResponseValidationError) ErrorName() string {
	return "RemoveMusicResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMusicResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMusicResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMusicResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMusicResponseValidationError{}
