// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/account/v1alpha1/avatar.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AvatarData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AvatarData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AvatarData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AvatarDataMultiError, or
// nil if none found.
func (m *AvatarData) ValidateAll() error {
	return m.validate(true)
}

func (m *AvatarData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvatarDataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvatarDataValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvatarDataValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvatarDataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvatarDataValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvatarDataValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetImage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AvatarDataValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AvatarDataValidationError{
					field:  "Image",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetImage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AvatarDataValidationError{
				field:  "Image",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AvatarDataMultiError(errors)
	}

	return nil
}

// AvatarDataMultiError is an error wrapping multiple validation errors
// returned by AvatarData.ValidateAll() if the designated constraints aren't met.
type AvatarDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AvatarDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AvatarDataMultiError) AllErrors() []error { return m }

// AvatarDataValidationError is the validation error returned by
// AvatarData.Validate if the designated constraints aren't met.
type AvatarDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AvatarDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AvatarDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AvatarDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AvatarDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AvatarDataValidationError) ErrorName() string { return "AvatarDataValidationError" }

// Error satisfies the builtin error interface
func (e AvatarDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAvatarData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AvatarDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AvatarDataValidationError{}

// Validate checks the field values on CreateAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAvatarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAvatarRequestMultiError, or nil if none found.
func (m *CreateAvatarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAvatarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cid

	// no validation rules for Name

	// no validation rules for Size

	// no validation rules for Width

	// no validation rules for Height

	if len(errors) > 0 {
		return CreateAvatarRequestMultiError(errors)
	}

	return nil
}

// CreateAvatarRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAvatarRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAvatarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAvatarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAvatarRequestMultiError) AllErrors() []error { return m }

// CreateAvatarRequestValidationError is the validation error returned by
// CreateAvatarRequest.Validate if the designated constraints aren't met.
type CreateAvatarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAvatarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAvatarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAvatarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAvatarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAvatarRequestValidationError) ErrorName() string {
	return "CreateAvatarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAvatarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAvatarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAvatarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAvatarRequestValidationError{}

// Validate checks the field values on CreateAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAvatarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAvatarResponseMultiError, or nil if none found.
func (m *CreateAvatarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAvatarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateAvatarResponseMultiError(errors)
	}

	return nil
}

// CreateAvatarResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAvatarResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAvatarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAvatarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAvatarResponseMultiError) AllErrors() []error { return m }

// CreateAvatarResponseValidationError is the validation error returned by
// CreateAvatarResponse.Validate if the designated constraints aren't met.
type CreateAvatarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAvatarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAvatarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAvatarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAvatarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAvatarResponseValidationError) ErrorName() string {
	return "CreateAvatarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAvatarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAvatarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAvatarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAvatarResponseValidationError{}

// Validate checks the field values on GetAvatarsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAvatarsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAvatarsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAvatarsResponseMultiError, or nil if none found.
func (m *GetAvatarsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAvatarsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAvatars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAvatarsResponseValidationError{
						field:  fmt.Sprintf("Avatars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAvatarsResponseValidationError{
						field:  fmt.Sprintf("Avatars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAvatarsResponseValidationError{
					field:  fmt.Sprintf("Avatars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Message

	if len(errors) > 0 {
		return GetAvatarsResponseMultiError(errors)
	}

	return nil
}

// GetAvatarsResponseMultiError is an error wrapping multiple validation errors
// returned by GetAvatarsResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAvatarsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAvatarsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAvatarsResponseMultiError) AllErrors() []error { return m }

// GetAvatarsResponseValidationError is the validation error returned by
// GetAvatarsResponse.Validate if the designated constraints aren't met.
type GetAvatarsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAvatarsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAvatarsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAvatarsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAvatarsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAvatarsResponseValidationError) ErrorName() string {
	return "GetAvatarsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAvatarsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAvatarsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAvatarsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAvatarsResponseValidationError{}

// Validate checks the field values on DeleteAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAvatarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAvatarRequestMultiError, or nil if none found.
func (m *DeleteAvatarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAvatarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAvatarRequestMultiError(errors)
	}

	return nil
}

// DeleteAvatarRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteAvatarRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteAvatarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAvatarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAvatarRequestMultiError) AllErrors() []error { return m }

// DeleteAvatarRequestValidationError is the validation error returned by
// DeleteAvatarRequest.Validate if the designated constraints aren't met.
type DeleteAvatarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAvatarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAvatarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAvatarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAvatarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAvatarRequestValidationError) ErrorName() string {
	return "DeleteAvatarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAvatarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAvatarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAvatarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAvatarRequestValidationError{}

// Validate checks the field values on DeleteAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAvatarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAvatarResponseMultiError, or nil if none found.
func (m *DeleteAvatarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAvatarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteAvatarResponseMultiError(errors)
	}

	return nil
}

// DeleteAvatarResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteAvatarResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteAvatarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAvatarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAvatarResponseMultiError) AllErrors() []error { return m }

// DeleteAvatarResponseValidationError is the validation error returned by
// DeleteAvatarResponse.Validate if the designated constraints aren't met.
type DeleteAvatarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAvatarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAvatarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAvatarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAvatarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAvatarResponseValidationError) ErrorName() string {
	return "DeleteAvatarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAvatarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAvatarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAvatarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAvatarResponseValidationError{}
