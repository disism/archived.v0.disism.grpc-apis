// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/account/v1alpha1/user.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetCreateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdateTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdateTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdateTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdateTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAvatar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvatar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Avatar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Bio

	// no validation rules for Private

	// no validation rules for Types

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on UserGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserGetResponseMultiError, or nil if none found.
func (m *UserGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UserGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserGetResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserGetResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserGetResponseMultiError(errors)
	}

	return nil
}

// UserGetResponseMultiError is an error wrapping multiple validation errors
// returned by UserGetResponse.ValidateAll() if the designated constraints
// aren't met.
type UserGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserGetResponseMultiError) AllErrors() []error { return m }

// UserGetResponseValidationError is the validation error returned by
// UserGetResponse.Validate if the designated constraints aren't met.
type UserGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGetResponseValidationError) ErrorName() string { return "UserGetResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGetResponseValidationError{}

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserRequestMultiError, or nil if none found.
func (m *CreateUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return CreateUserRequestMultiError(errors)
	}

	return nil
}

// CreateUserRequestMultiError is an error wrapping multiple validation errors
// returned by CreateUserRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserRequestMultiError) AllErrors() []error { return m }

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateUserResponseMultiError, or nil if none found.
func (m *CreateUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuthorizationToken

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateUserResponseMultiError(errors)
	}

	return nil
}

// CreateUserResponseMultiError is an error wrapping multiple validation errors
// returned by CreateUserResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateUserResponseMultiError) AllErrors() []error { return m }

// CreateUserResponseValidationError is the validation error returned by
// CreateUserResponse.Validate if the designated constraints aren't met.
type CreateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserResponseValidationError) ErrorName() string {
	return "CreateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Param.(type) {
	case *GetUserRequest_Id:
		if v == nil {
			err := GetUserRequestValidationError{
				field:  "Param",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Id
	case *GetUserRequest_Email:
		if v == nil {
			err := GetUserRequestValidationError{
				field:  "Param",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Email
	case *GetUserRequest_Username:
		if v == nil {
			err := GetUserRequestValidationError{
				field:  "Param",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Username
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on EditUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUserRequestMultiError, or nil if none found.
func (m *EditUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Bio

	if len(errors) > 0 {
		return EditUserRequestMultiError(errors)
	}

	return nil
}

// EditUserRequestMultiError is an error wrapping multiple validation errors
// returned by EditUserRequest.ValidateAll() if the designated constraints
// aren't met.
type EditUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUserRequestMultiError) AllErrors() []error { return m }

// EditUserRequestValidationError is the validation error returned by
// EditUserRequest.Validate if the designated constraints aren't met.
type EditUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUserRequestValidationError) ErrorName() string { return "EditUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUserRequestValidationError{}

// Validate checks the field values on EditUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUserResponseMultiError, or nil if none found.
func (m *EditUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return EditUserResponseMultiError(errors)
	}

	return nil
}

// EditUserResponseMultiError is an error wrapping multiple validation errors
// returned by EditUserResponse.ValidateAll() if the designated constraints
// aren't met.
type EditUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUserResponseMultiError) AllErrors() []error { return m }

// EditUserResponseValidationError is the validation error returned by
// EditUserResponse.Validate if the designated constraints aren't met.
type EditUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUserResponseValidationError) ErrorName() string { return "EditUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e EditUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUserResponseValidationError{}

// Validate checks the field values on EditUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditUsernameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUsernameRequestMultiError, or nil if none found.
func (m *EditUsernameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUsernameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return EditUsernameRequestMultiError(errors)
	}

	return nil
}

// EditUsernameRequestMultiError is an error wrapping multiple validation
// errors returned by EditUsernameRequest.ValidateAll() if the designated
// constraints aren't met.
type EditUsernameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUsernameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUsernameRequestMultiError) AllErrors() []error { return m }

// EditUsernameRequestValidationError is the validation error returned by
// EditUsernameRequest.Validate if the designated constraints aren't met.
type EditUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUsernameRequestValidationError) ErrorName() string {
	return "EditUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUsernameRequestValidationError{}

// Validate checks the field values on EditUsernameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditUsernameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUsernameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUsernameResponseMultiError, or nil if none found.
func (m *EditUsernameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUsernameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return EditUsernameResponseMultiError(errors)
	}

	return nil
}

// EditUsernameResponseMultiError is an error wrapping multiple validation
// errors returned by EditUsernameResponse.ValidateAll() if the designated
// constraints aren't met.
type EditUsernameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUsernameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUsernameResponseMultiError) AllErrors() []error { return m }

// EditUsernameResponseValidationError is the validation error returned by
// EditUsernameResponse.Validate if the designated constraints aren't met.
type EditUsernameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUsernameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUsernameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUsernameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUsernameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUsernameResponseValidationError) ErrorName() string {
	return "EditUsernameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditUsernameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUsernameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUsernameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUsernameResponseValidationError{}

// Validate checks the field values on EditEmailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditEmailRequestMultiError, or nil if none found.
func (m *EditEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return EditEmailRequestMultiError(errors)
	}

	return nil
}

// EditEmailRequestMultiError is an error wrapping multiple validation errors
// returned by EditEmailRequest.ValidateAll() if the designated constraints
// aren't met.
type EditEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditEmailRequestMultiError) AllErrors() []error { return m }

// EditEmailRequestValidationError is the validation error returned by
// EditEmailRequest.Validate if the designated constraints aren't met.
type EditEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditEmailRequestValidationError) ErrorName() string { return "EditEmailRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditEmailRequestValidationError{}

// Validate checks the field values on EditEmailResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditEmailResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditEmailResponseMultiError, or nil if none found.
func (m *EditEmailResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditEmailResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return EditEmailResponseMultiError(errors)
	}

	return nil
}

// EditEmailResponseMultiError is an error wrapping multiple validation errors
// returned by EditEmailResponse.ValidateAll() if the designated constraints
// aren't met.
type EditEmailResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditEmailResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditEmailResponseMultiError) AllErrors() []error { return m }

// EditEmailResponseValidationError is the validation error returned by
// EditEmailResponse.Validate if the designated constraints aren't met.
type EditEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditEmailResponseValidationError) ErrorName() string {
	return "EditEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditEmailResponseValidationError{}

// Validate checks the field values on EditPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPasswordRequestMultiError, or nil if none found.
func (m *EditPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewPassword

	// no validation rules for Password

	if len(errors) > 0 {
		return EditPasswordRequestMultiError(errors)
	}

	return nil
}

// EditPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by EditPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type EditPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPasswordRequestMultiError) AllErrors() []error { return m }

// EditPasswordRequestValidationError is the validation error returned by
// EditPasswordRequest.Validate if the designated constraints aren't met.
type EditPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPasswordRequestValidationError) ErrorName() string {
	return "EditPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPasswordRequestValidationError{}

// Validate checks the field values on EditPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPasswordResponseMultiError, or nil if none found.
func (m *EditPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return EditPasswordResponseMultiError(errors)
	}

	return nil
}

// EditPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by EditPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type EditPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPasswordResponseMultiError) AllErrors() []error { return m }

// EditPasswordResponseValidationError is the validation error returned by
// EditPasswordResponse.Validate if the designated constraints aren't met.
type EditPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPasswordResponseValidationError) ErrorName() string {
	return "EditPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPasswordResponseValidationError{}

// Validate checks the field values on EditPrivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPrivateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPrivateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPrivateRequestMultiError, or nil if none found.
func (m *EditPrivateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPrivateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Private

	// no validation rules for Password

	if len(errors) > 0 {
		return EditPrivateRequestMultiError(errors)
	}

	return nil
}

// EditPrivateRequestMultiError is an error wrapping multiple validation errors
// returned by EditPrivateRequest.ValidateAll() if the designated constraints
// aren't met.
type EditPrivateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPrivateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPrivateRequestMultiError) AllErrors() []error { return m }

// EditPrivateRequestValidationError is the validation error returned by
// EditPrivateRequest.Validate if the designated constraints aren't met.
type EditPrivateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPrivateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPrivateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPrivateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPrivateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPrivateRequestValidationError) ErrorName() string {
	return "EditPrivateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditPrivateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPrivateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPrivateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPrivateRequestValidationError{}

// Validate checks the field values on EditPrivateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPrivateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPrivateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPrivateResponseMultiError, or nil if none found.
func (m *EditPrivateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPrivateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return EditPrivateResponseMultiError(errors)
	}

	return nil
}

// EditPrivateResponseMultiError is an error wrapping multiple validation
// errors returned by EditPrivateResponse.ValidateAll() if the designated
// constraints aren't met.
type EditPrivateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPrivateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPrivateResponseMultiError) AllErrors() []error { return m }

// EditPrivateResponseValidationError is the validation error returned by
// EditPrivateResponse.Validate if the designated constraints aren't met.
type EditPrivateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPrivateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPrivateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPrivateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPrivateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPrivateResponseValidationError) ErrorName() string {
	return "EditPrivateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditPrivateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPrivateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPrivateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPrivateResponseValidationError{}

// Validate checks the field values on EditUserAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditUserAvatarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUserAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUserAvatarRequestMultiError, or nil if none found.
func (m *EditUserAvatarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUserAvatarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AvatarId

	if len(errors) > 0 {
		return EditUserAvatarRequestMultiError(errors)
	}

	return nil
}

// EditUserAvatarRequestMultiError is an error wrapping multiple validation
// errors returned by EditUserAvatarRequest.ValidateAll() if the designated
// constraints aren't met.
type EditUserAvatarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUserAvatarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUserAvatarRequestMultiError) AllErrors() []error { return m }

// EditUserAvatarRequestValidationError is the validation error returned by
// EditUserAvatarRequest.Validate if the designated constraints aren't met.
type EditUserAvatarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUserAvatarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUserAvatarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUserAvatarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUserAvatarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUserAvatarRequestValidationError) ErrorName() string {
	return "EditUserAvatarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditUserAvatarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUserAvatarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUserAvatarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUserAvatarRequestValidationError{}

// Validate checks the field values on EditUserAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditUserAvatarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditUserAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditUserAvatarResponseMultiError, or nil if none found.
func (m *EditUserAvatarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditUserAvatarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return EditUserAvatarResponseMultiError(errors)
	}

	return nil
}

// EditUserAvatarResponseMultiError is an error wrapping multiple validation
// errors returned by EditUserAvatarResponse.ValidateAll() if the designated
// constraints aren't met.
type EditUserAvatarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditUserAvatarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditUserAvatarResponseMultiError) AllErrors() []error { return m }

// EditUserAvatarResponseValidationError is the validation error returned by
// EditUserAvatarResponse.Validate if the designated constraints aren't met.
type EditUserAvatarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditUserAvatarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditUserAvatarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditUserAvatarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditUserAvatarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditUserAvatarResponseValidationError) ErrorName() string {
	return "EditUserAvatarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditUserAvatarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditUserAvatarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditUserAvatarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditUserAvatarResponseValidationError{}

// Validate checks the field values on IAmResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IAmResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IAmResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IAmResponseMultiError, or
// nil if none found.
func (m *IAmResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IAmResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IAmResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IAmResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IAmResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Message

	if len(errors) > 0 {
		return IAmResponseMultiError(errors)
	}

	return nil
}

// IAmResponseMultiError is an error wrapping multiple validation errors
// returned by IAmResponse.ValidateAll() if the designated constraints aren't met.
type IAmResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IAmResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IAmResponseMultiError) AllErrors() []error { return m }

// IAmResponseValidationError is the validation error returned by
// IAmResponse.Validate if the designated constraints aren't met.
type IAmResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IAmResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IAmResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IAmResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IAmResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IAmResponseValidationError) ErrorName() string { return "IAmResponseValidationError" }

// Error satisfies the builtin error interface
func (e IAmResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIAmResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IAmResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IAmResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserRequestMultiError, or nil if none found.
func (m *DeleteUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Password

	if len(errors) > 0 {
		return DeleteUserRequestMultiError(errors)
	}

	return nil
}

// DeleteUserRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUserRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserRequestMultiError) AllErrors() []error { return m }

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUserResponseMultiError, or nil if none found.
func (m *DeleteUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return DeleteUserResponseMultiError(errors)
	}

	return nil
}

// DeleteUserResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUserResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUserResponseMultiError) AllErrors() []error { return m }

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}
