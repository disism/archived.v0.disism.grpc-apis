// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/account/v1alpha1/public.proto

package account

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVersionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVersionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVersionResponseMultiError, or nil if none found.
func (m *GetVersionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVersionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return GetVersionResponseMultiError(errors)
	}

	return nil
}

// GetVersionResponseMultiError is an error wrapping multiple validation errors
// returned by GetVersionResponse.ValidateAll() if the designated constraints
// aren't met.
type GetVersionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVersionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVersionResponseMultiError) AllErrors() []error { return m }

// GetVersionResponseValidationError is the validation error returned by
// GetVersionResponse.Validate if the designated constraints aren't met.
type GetVersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVersionResponseValidationError) ErrorName() string {
	return "GetVersionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVersionResponseValidationError{}

// Validate checks the field values on GetWebfingerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWebfingerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWebfingerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWebfingerRequestMultiError, or nil if none found.
func (m *GetWebfingerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWebfingerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Resource

	if len(errors) > 0 {
		return GetWebfingerRequestMultiError(errors)
	}

	return nil
}

// GetWebfingerRequestMultiError is an error wrapping multiple validation
// errors returned by GetWebfingerRequest.ValidateAll() if the designated
// constraints aren't met.
type GetWebfingerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWebfingerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWebfingerRequestMultiError) AllErrors() []error { return m }

// GetWebfingerRequestValidationError is the validation error returned by
// GetWebfingerRequest.Validate if the designated constraints aren't met.
type GetWebfingerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWebfingerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWebfingerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWebfingerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWebfingerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWebfingerRequestValidationError) ErrorName() string {
	return "GetWebfingerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetWebfingerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWebfingerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWebfingerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWebfingerRequestValidationError{}

// Validate checks the field values on GetWebfingerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWebfingerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWebfingerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWebfingerResponseMultiError, or nil if none found.
func (m *GetWebfingerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWebfingerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	for idx, item := range m.GetLinks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetWebfingerResponseValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetWebfingerResponseValidationError{
						field:  fmt.Sprintf("Links[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetWebfingerResponseValidationError{
					field:  fmt.Sprintf("Links[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetWebfingerResponseMultiError(errors)
	}

	return nil
}

// GetWebfingerResponseMultiError is an error wrapping multiple validation
// errors returned by GetWebfingerResponse.ValidateAll() if the designated
// constraints aren't met.
type GetWebfingerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWebfingerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWebfingerResponseMultiError) AllErrors() []error { return m }

// GetWebfingerResponseValidationError is the validation error returned by
// GetWebfingerResponse.Validate if the designated constraints aren't met.
type GetWebfingerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWebfingerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWebfingerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWebfingerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWebfingerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWebfingerResponseValidationError) ErrorName() string {
	return "GetWebfingerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetWebfingerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWebfingerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWebfingerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWebfingerResponseValidationError{}

// Validate checks the field values on GetWebfingerResponse_Link with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetWebfingerResponse_Link) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWebfingerResponse_Link with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetWebfingerResponse_LinkMultiError, or nil if none found.
func (m *GetWebfingerResponse_Link) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWebfingerResponse_Link) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rel

	// no validation rules for Type

	// no validation rules for Href

	if len(errors) > 0 {
		return GetWebfingerResponse_LinkMultiError(errors)
	}

	return nil
}

// GetWebfingerResponse_LinkMultiError is an error wrapping multiple validation
// errors returned by GetWebfingerResponse_Link.ValidateAll() if the
// designated constraints aren't met.
type GetWebfingerResponse_LinkMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWebfingerResponse_LinkMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWebfingerResponse_LinkMultiError) AllErrors() []error { return m }

// GetWebfingerResponse_LinkValidationError is the validation error returned by
// GetWebfingerResponse_Link.Validate if the designated constraints aren't met.
type GetWebfingerResponse_LinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWebfingerResponse_LinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWebfingerResponse_LinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWebfingerResponse_LinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWebfingerResponse_LinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWebfingerResponse_LinkValidationError) ErrorName() string {
	return "GetWebfingerResponse_LinkValidationError"
}

// Error satisfies the builtin error interface
func (e GetWebfingerResponse_LinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWebfingerResponse_Link.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWebfingerResponse_LinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWebfingerResponse_LinkValidationError{}
